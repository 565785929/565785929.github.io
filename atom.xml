<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sajor's Blog]]></title>
  <link href="blog.sajor.top/atom.xml" rel="self"/>
  <link href="blog.sajor.top/"/>
  <updated>2020-01-17T16:53:38+08:00</updated>
  <id>blog.sajor.top/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[比特币]]></title>
    <link href="blog.sajor.top/15769918912350.html"/>
    <updated>2019-12-22T13:18:11+08:00</updated>
    <id>blog.sajor.top/15769918912350.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">EC私钥 Elliptic Curve private key</h3>

<p>比特币私钥为一个256位的二进制随机大数 一共32字节（Random 256 bit integer）</p>

<p>比特币私钥只是一个数字。你可以用硬币、铅笔和纸来随机生成你的私钥：掷硬币256次，用纸和笔记录正反面并转换为0和1，随机得到的256位二进制数字可作为比特币钱包的私钥。 </p>

<p>将256位二进制大数转为十六进制（每四位二进制数转为一位十六进制数）得到一个64位的十进制字符串，这就是ec私钥（95e7e1e73b70965d31c3e56121ce14dd4f88431c8d5e7645e8fb4a73ba72ad29）</p>

<p>提示比特币私钥空间的大小是2<sup>256，这是一个非常大的数字。用十进制表示的话，大约是10<sup>77，而可见宇宙被估计只含有10<sup>80个原子。</sup></sup></sup></p>

<h3 id="toc_1">WIF格式私钥 Wallet import format</h3>

<p>私钥可以以许多不同的格式表示，所有这些都对应于相同的256位的数字。表4-2展示了私钥的三种常见格式。不同的格式用在不同的场景下。十六进制和原始的二进制格式用在软件的内部，很少展示给用户看。WIF格式用在钱包之间密钥的输入和输出，也用于代表私钥的二维码（条形码）。</p>

<p>ec私钥转换成wif格式私钥需要经过以下几个步骤<br/>
主网： 在ec私钥前面添加版本号x80，再经过base58check。生成的字符串由5开头<br/>
测试网： 在ec私钥前面添加版本号xEF，再经过base58check。生成的字符串由9开头</p>

<h3 id="toc_2">WIF-compressed格式私钥</h3>

<p>现在广泛使用这种私钥，表示比特币地址是由压缩公钥生成的。故也成为“压缩格式私钥”，<br/>
实际上“压缩格式私钥”是一种名称上的误导，因为当一个私钥被使用WIF压缩格式导出时，不但没有压缩，而且比“非压缩格式”私钥长出一个字节。这个多出来的一个字节是私钥被加了后缀01，用以表明该私钥是来自于一个较新的钱包， 只能被用来生成压缩的公钥。私钥是非压缩的，也不能被压缩。“压缩的私钥”实际上只是表示“用于生成压缩格式公钥的私钥”，而“非压缩格式私钥”用来表明“用于生成非压缩格式公钥的私钥”。为避免更多误解，应该只可以说导出格式 是“WIF压缩格式”或者“WIF”，而不能说这个私钥是“压缩”的。</p>

<p>ec私钥转换成wif-compressed格式私钥需要经过以下几个步骤<br/>
主网： 在ec私钥前面添加版本号x80，后面添加x01,再经过base58check。 生成的字符串由K或L开头<br/>
测试网： 在ec私钥前面添加版本号xEF，后面添加x01,再经过base58check。 生成的字符串由c开头</p>

<h1 id="toc_3">公钥</h1>

<p>公钥由私钥经过secp256k1椭圆曲线算法生成。<br/>
公钥也可以用多种不同格式来表示，最重要的是它们分为非压缩格式或压缩格式公钥这两种形式。<br/>
我们从前文可知，公钥是在椭圆曲线上的一个点，由一对坐标（x，y）组成。公钥通常表示为前缀04紧接着两个256比特的数字。其中一个256比特数字是公钥的x坐标，另一个256比特数字是y坐标。前缀04是用来区分非压缩格式公钥， 压缩格式公钥是以02或者03开头。</p>

<h3 id="toc_4">普通公钥</h3>

<p>经过椭圆曲线加密算法生成一个（x, y）的坐标，公钥就是两个坐标点连接形成的字符串。</p>

<h3 id="toc_5">压缩公钥</h3>

<p>引入压缩格式公钥是为了减少比特币交易的字节数，从而可以节省那些运行区块链数据库的节点磁盘空间。大部分比特币交易包含了公钥，用于验证用户的凭据和支付比特币。每个公钥有520比特（包括前缀，x坐标，y坐标）。如果每个区块有数百个交易，每天有成千上万的交易发生，区块链里就会被写入大量的数据。</p>

<p>一个公钥是一个椭圆曲线上的点(x, y)。而椭圆曲线实际是一个数学方程，曲线上的点实际是该方程的一个解。因此，如果我们知道了公钥的x坐标，就可以通过解方程y2 mod p = (x3 + 7) mod p得到y坐 标。这种方案可以让我们只存储公钥的x坐标，略去y坐标，从而将公钥的大小和存储空间减少了256比特。每个交易所 需要的字节数减少了近一半，随着时间推移，就大大节省了很多数据传输和存储。</p>

<p>未压缩格式公钥使用04作为前缀，而压缩格式公钥是以02或03作为前缀。需要这两种不同前缀的原因是：因为椭圆曲 线加密的公式的左边是y2 ，也就是说y的解是来自于一个平方根，可能是正值也可能是负值。更形象地说，y坐标可能在 x坐标轴的上面或者下面。从图4-2的椭圆曲线图中可以看出，曲线是对称的，从x轴看就像对称的镜子两面。因此，如果我们略去y坐标，就必须储存y的符号（正值或者负值）。换句话说，对于给定的x值，我们需要知道y值在x轴的上面还是下面，因为它们代表椭圆曲线上不同的点，即不同的公钥。当我们在素数p阶的有限域上使用二进制算术计算椭圆曲线的时候，y坐标可能是奇数或者偶数，分别对应前面所讲的y值的正负符号。因此，为了区分y坐标的两种可能值，我们在生成压缩格式公钥时，如果y是偶数，则使用02作为前缀；如果y是奇数，则使用03作为前缀。这样就可以根据公钥中给定的x值，正确推导出对应的y坐标，从而将公钥解压缩为在椭圆曲线上的完整的点坐标。</p>

<h1 id="toc_6">比特币地址</h1>

<p>地址为公钥的hash， 因为有压缩和未压缩的公钥两种格式，所以同一个私钥可以生成两个不同的公钥，两个不同的公钥可以推出两个不用的比特币地址，但是它们对应的私钥却是相同的。</p>

<h1 id="toc_7">总结</h1>

<p><img src="media/15769918912350/bitcoin_address.jpg" alt="bitcoin_address"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『互联网架构』软件架构-API接口安全网关《service变controller》（16）]]></title>
    <link href="blog.sajor.top/15768275980852.html"/>
    <updated>2019-12-20T15:39:58+08:00</updated>
    <id>blog.sajor.top/15768275980852.html</id>
    <content type="html"><![CDATA[
<p><a href="https://www.jianshu.com/p/27f4382365a7">jianshu</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试被问烂的 Spring IOC(求求你别再问了)]]></title>
    <link href="blog.sajor.top/15768270099640.html"/>
    <updated>2019-12-20T15:30:09+08:00</updated>
    <id>blog.sajor.top/15768270099640.html</id>
    <content type="html"><![CDATA[
<p><a href="https://www.jianshu.com/p/17b66e6390fd">jianshu</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[idea 类注释和方法注释]]></title>
    <link href="blog.sajor.top/15665458213371.html"/>
    <updated>2019-08-23T15:37:01+08:00</updated>
    <id>blog.sajor.top/15665458213371.html</id>
    <content type="html"><![CDATA[
<p>添加类注释：</p>

<p>File-&gt;Setting-&gt;Editor-&gt;File and Code Templates-&gt;Class</p>

<pre><code class="language-text">#if (${PACKAGE_NAME} &amp;&amp; ${PACKAGE_NAME} != &quot;&quot;)package ${PACKAGE_NAME};#end
#parse(&quot;File Header.java&quot;)
/**
*@description ${description}
*@author Sajor
*@create ${YEAR}/${MONTH}/${DAY} ${HOUR}:${MINUTE}
*/
public class ${NAME} {
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[idea 热部署]]></title>
    <link href="blog.sajor.top/15659629846282.html"/>
    <updated>2019-08-16T21:43:04+08:00</updated>
    <id>blog.sajor.top/15659629846282.html</id>
    <content type="html"><![CDATA[
<p>最近调试代码需要起服务并修改代码这就导致重复工作，目前是修改服务器配置，即当idea失去焦点时更新类和资源，但是这种只支持在debug模式且是在idea失去焦点才会触发热部署，这就相对加载的慢了。此法的配置方法：</p>

<p>Run –&gt;Edit Configgurations</p>

<p><img src="media/15659629846282/15659630233075.jpg" alt="" style="width:411px;"/></p>

<p>如果你sever 选项卡下没有On frame deactivation，那么就需要配置 Deployment 选项卡，点击右边绿色+，选择自己对应的项目，建议选择带 exploded， 这个相当于改 Tomcat 的 CATALINA_HOME， 效率比较高。</p>

<p><img src="media/15659629846282/15659630849569.jpg" alt="" style="width:950px;"/></p>

<p><img src="media/15659629846282/15659631761726.jpg" alt="" style="width:949px;"/></p>

<p>选择好后， 删掉默认的Build， 提高效率</p>

<p>虽然配置了热部署但是感觉还是有点慢，发现idea没有默认自动编译，因此开启后将省去了每次修改代码又要重新启动的步骤：</p>

<p>*进入设置setting，Build,Execut, Deployment -&gt; Compiler 勾选右侧的Build Project automatically</p>

<p><img src="media/15659629846282/15659629885946.jpg" alt="" style="width:1109px;"/></p>

<ul>
<li>开启项目运行时自动build，在打开的页面上快捷键ctrl + shift + a 搜索命令：registry –&gt; 勾选compiler.automake.allow.when.app.running*</li>
</ul>

<p><img src="media/15659629846282/15659632690639.jpg" alt="" style="width:670px;"/></p>

<p><img src="media/15659629846282/15659633447369.jpg" alt="" style="width:913px;"/></p>

<p>完</p>

<p>参考：<a href="https://blog.csdn.net/z15732621582/article/details/79439359">idea热部署且开启自动编译</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven]]></title>
    <link href="blog.sajor.top/15659217621647.html"/>
    <updated>2019-08-16T10:16:02+08:00</updated>
    <id>blog.sajor.top/15659217621647.html</id>
    <content type="html"><![CDATA[
<p>一个项目管理工具 </p>

<ul>
<li>统一开发规范与工具</li>
<li>统一管理jar包</li>
</ul>

<h2 id="toc_0">pom.xml (Project Object Model)</h2>

<p>项目对象模型：用于描述整个Maven项目，也称为Maven描述文件。</p>

<p>pom.xml 最基础是这样的</p>

<pre><code class="language-text">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
     
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;com.xrq.withmaven&lt;/groupId&gt;
  &lt;artifactId&gt;withmaven&lt;/artifactId&gt;
  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
  &lt;build/&gt;
&lt;/project&gt;
</code></pre>

<p>modelVersion </p>

<p>指定Maven模型版本号， 对于Maven2和Maven3来说，只能是4.0.0</p>

<p>groupId</p>

<p>顾名思义，这个应该是公司名或是组织名。一般来说groupId是由三个部分组成，每个部分之间以&quot;.&quot;分隔，第一部分是项目用途，比如用于商业的就是&quot;com&quot;，用于非营利性组织的就是&quot;org&quot;；第二部分是公司名，比如&quot;tengxun&quot;、&quot;baidu&quot;、&quot;alibaba&quot;；第三部分是你的项目名</p>

<p>artifactId</p>

<p>可以认为是Maven构建的项目名，比如你的项目中有子项目，就可以使用&quot;项目名-子项目名&quot;的命名方式</p>

<p>version</p>

<p>本号，SNAPSHOT意为快照，说明该项目还在开发中，是不稳定的版本。在Maven中很重要的一点是，groupId、artifactId、version三个元素生成了一个Maven项目的基本坐标，这非常重要，我在使用和研究Maven的时候多次感受到了这点。</p>

<hr/>

<p>还有另外一些元素：</p>

<p>packing</p>

<p>项目打包的类型，可以使jar, war, rar, ear, pom 默认是jar</p>

<p>dependencies 和 dependency</p>

<p>前者包含后者。前面说了，Maven的一个重要作用就是统一管理jar包，为了一个项目可以build或运行，项目中不可避免的，会依赖很多其他的jar包，在Maven中，这些依赖就被称为dependency。</p>

<p>说到这里，就有一个本地仓库和远程仓库的概念了。官方下载的本地仓库的配置在&quot;%MAVEN_HOME%\conf\settings.xml&quot;里面，找一下&quot;localRepository&quot;就可以了；MyEclipse默认的本地仓库的地址在&quot;{user.home}/.m2/repository&quot;路径下，同样找一下&quot;localRepository&quot;就可以找到MyEclipse默认的本地仓库了。</p>

<p>本地仓库和远程仓库是这样的，Maven工程首先会从本地仓库中获取jar包，当无法获取指定jar包时，本地仓库会从远程仓库（中央仓库）中下载jar包，并放入本地仓库以备将来使用。</p>

<p>举例：比如项目使用MyBatis可以这么配置：</p>

<pre><code class="language-text">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.2.5&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>

<p>之前有说过groupId、artifactId、version唯一标识一个Maven项目，有了这三个元素，我们就可以去远程仓库下载MyBatis3.2.5.jar到本地仓库了。回想我们之前的做法，如果要MyBatis的jar包，发现没有，然后去网上下载一个，需要另外的jar包，然后去网上下载一个，但是有了Maven，就方便多了，只需要配置jar包对应的dependency依赖，Maven会自动帮助我们去远程仓库中下载jar包到本地仓库中。</p>

<p>properties</p>

<p>properties是用来定义一些配置属性的，例如project.build.sourceEncoding（项目构建源码编码方式），可以设置为UTF-8，防止中文乱码，也可定义相关构建版本号，便于日后统一升级。</p>

<p>build </p>

<p>build表示与构建相关的配置，比如build下有finalName，表示的就是最终构建之后的名称。</p>

<p>接着解释一下Maven的目录结构：<br/>
•   main目录下是项目的主要代码，test目录下存放测试相关的代码<br/>
•   编译输出后的代码会放在target目录下<br/>
•   src/main/java下存放Java代码，src/main/resources下存放配置文件<br/>
•   这里没有webapp，Web项目会有webapp目录，webapp下存放Web应用相关代码<br/>
•   pom.xml是Maven项目的配置文件</p>

<p>maven <a href="http://maven.apache.org/download.cgi">官网</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[密码学原理]]></title>
    <link href="blog.sajor.top/15651008291490.html"/>
    <updated>2019-08-06T22:13:49+08:00</updated>
    <id>blog.sajor.top/15651008291490.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">哈希</h2>

<p>输出空间 2<sup>256</sup></p>

<ul>
<li>collision resistance 哈希碰撞（没有数学方法可以证明，只有实战经验）</li>
</ul>

<p>没有一个好的方法可以算出 X 的hash值正好等于 Y 的hash值，可以使用穷举方法 brute-force<br/>
<strong>用处</strong>： 在上传文件时，可以先算一个 digest 在下载的时候，再算一次查看是否和之前的相等，即可发现文件是否被篡改。<br/>
MD5 原来以为具有这个性质，但是后来被证明是可以被人为制造碰撞的。</p>

<ul>
<li>hiding 单向的 </li>
</ul>

<p>前提：输入空间比较大，且分布均匀<br/>
X -&gt; H(X) 知道了 H(X) 并不能知道 X 的值</p>

<p>digital commitment <br/>
(digital equivalent of a sealed envelope)<br/>
例如：某人要预测股市，需要第一天公布预测信息，但是如果提前公布则会对股市产生影响。所以可以使用这种方式，将预测结果放到信封里，由公证处保管，等股市结果出来后，再由公证处打开信封。<br/>
这种方式在信息学中可以使用hash实现，先将预测结果进行哈希运算，等股市结果出来后再公布明文结果，计算哈希值是否和之前公布的相等即可。</p>

<p>但是要保证输入空间足够大，所以可以拼接一个随机数 nonce 去算哈希来保证输入空间足够大。</p>

<ul>
<li>puzzle friendly </li>
</ul>

<p>比特币要求的性质。要求已知的哈希值 H(X) 不能反推 X 的值或 X 值的范围。<br/>
挖矿的过程就是 H(block header) &lt;= target 区块头中可以改变 nonce 的值，通过改变随机数的值来控制哈希小于目标值来挖矿。 (Proof Of Work)</p>

<ul>
<li>difficult to solve, but easy to verify</li>
</ul>

<p>比特币中用的哈希函数是 SHA-256(Secure Hash Algorithm)</p>

<h2 id="toc_1">非对称加密</h2>

<p>对称加密的问题在于分发秘钥的途径不安全。</p>

<p>a good source of randomness 好的随机源</p>

<p>比特币中是先对转账信息 message 取哈希，再对哈希值签名</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[排序算法]]></title>
    <link href="blog.sajor.top/15650106911020.html"/>
    <updated>2019-08-05T21:11:31+08:00</updated>
    <id>blog.sajor.top/15650106911020.html</id>
    <content type="html"><![CDATA[
<h1 id="toc_0">排序算法说明</h1>

<ol>
<li>排序的定义<br/>
对一序列对象根据某个关键字进行排序。</li>
<li>术语说明<br/>
稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；<br/>
不稳定：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；<br/>
内排序：所有排序操作都在内存中完成；<br/>
外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；<br/>
时间复杂度： 一个算法执行所耗费的时间。<br/>
空间复杂度：运行完一个程序所需内存的大小。</li>
<li><p>算法总结<br/>
<img src="media/15650106911020/15650122429787.jpg" alt=""/><br/>
图片名词解释：<br/>
n: 数据规模<br/>
k: “桶”的个数<br/>
In-place: 占用常数内存，不占用额外内存<br/>
Out-place: 占用额外内存</p></li>
<li><p>比较和非比较的区别<br/>
常见的快速排序、归并排序、堆排序、冒泡排序等属于比较排序。在排序的最终结果里，元素之间的次序依赖于它们之间的比较。每个数都必须和其他数进行比较，才能确定自己的位置。<br/>
在冒泡排序之类的排序中，问题规模为n，又因为需要比较n次，所以平均时间复杂度为O(n²)。在归并排序、快速排序之类的排序中，问题规模通过分治法消减为logN次，所以时间复杂度平均O(nlogn)。<br/>
比较排序的优势是，适用于各种规模的数据，也不在乎数据的分布，都能进行排序。可以说，比较排序适用于一切需要排序的情况。<br/>
计数排序、基数排序、桶排序则属于非比较排序。非比较排序是通过确定每个元素之前，应该有多少个元素来排序。针对数组arr，计算arr之前有多少个元素，则唯一确定了arr在排序后数组中的位置。<br/>
非比较排序只要确定每个元素之前的已有的元素个数即可，所有一次遍历即可解决。算法时间复杂度O(n)。<br/>
非比较排序时间复杂度底，但由于非比较排序需要占用空间来确定唯一位置。所以对数据规模和数据分布有一定的要求。</p></li>
</ol>

<h1 id="toc_1">排序算法</h1>

<p>首先定义一个接口 <code>void X_Sort ( ElementType A[], int N )</code><br/>
本文为简单起见，大多数情况下，讨论<strong>从小大的整数</strong>排序</p>

<ul>
<li>N是正整数</li>
<li>只讨论基于比较的排序(&gt; = &lt; 有定义)</li>
<li>只讨论内部排序</li>
<li>稳定性:任意两个相等的数据，排序前后的相对位置不发生改变</li>
<li>没有一种排序是任何情况下 都表现最好的</li>
</ul>

<h2 id="toc_2">冒泡排序(Bubble Sort)</h2>

<p>冒泡排序每次比较相邻两个数，<code>A[i] &gt; A[i + 1]</code> 则交换位置。可以确定的是，在经过一趟排序后，整个序列的最大值一定被放到了数组的最后一位。所以只需要进行N-1次循环则可以将整个序列都排好。<br/>
<img src="media/15650106911020/140153i7562exzjrnagaja.gif" alt="140153i7562exzjrnagaja"/></p>

<pre><code class="language-text">void Bubble_Sort(ElementType A[], int N)
{
   for (P = N - 1; P &gt;= 0; P--) {
        for (i = 0; i &lt; P; i++) { /* 一趟冒泡 */
            if (A[i] &gt; A[i + 1]) {
                Swap(A[i], A[i + 1]);
            }
        }
    }
}
</code></pre>

<p>但是这样做还有一些问题，如果在其中某一步就排好序了，但是还需要接着进行比较。所以进行如下改动。</p>

<pre><code class="language-text">void Bubble_Sort(ElementType A[], int N)
{
    flag = 0;
    for (P = N - 1; P &gt;= 0; P--) {
        for (i = 0; i &lt; P; i++) { /* 一趟冒泡 */
            if (A[i] &gt; A[i + 1]) {
                Swap(A[i], A[i + 1]);
                flag = 1; /* 标识发生了交换 */
            }
        }
        if (flag == 0)
            break; /* 全程无交换 */
    }
}
</code></pre>

<p>最好情况：顺序T = O( N ) <br/>
最坏情况：逆序T = O( N<sup>2</sup> )</p>

<h2 id="toc_3">插入排序</h2>

<p>像玩牌一样，一张一张摸牌，从后往前依次比较手中有序的序列，将抽到的牌插入到第一张小于这张牌的后面。其余的牌向后错一位。<br/>
<img src="media/15650106911020/140155h0at131fkz33j1af.gif" alt="140155h0at131fkz33j1af"/></p>

<pre><code class="language-text">void Insertion_Sort(ElementType A[], int N)
{

    for (P = 1; P &lt; N; P++)
    {
        Tmp = A[P]; /* 摸下一张牌 */
        for (i = P; i &gt; 0 &amp;&amp; A[i - 1] &gt; Tmp; i--)
            A[i] = A[i - 1]; /* 移出空位 */
        A[i] = Tmp;          /* 新牌落位 */
    }
}
</code></pre>

<p>最好情况：顺序T = O( N ) <br/>
最坏情况：逆序T = O( N<sup>2</sup> )</p>

<p><strong>思考</strong>：给定初始序列{34, 8, 64, 51, 32, 21}，冒泡排序和插入排序分别需要多少次元素交换才能完成?</p>

<p>对于下标i<j，如果A[i]>A[j]，则称(i,j)是一对逆序对(inversion)。问题:序列{34, 8, 64, 51, 32, 21}中有多少逆序对? </p>

<p>(34, 8) (34, 32) (34, 21) (64, 51) (64, 32) (64, 21) (51, 32) (51, 21) (32, 21)</p>

<p>所以交换2个相邻元素正好消去1个逆序对! 假设需要排序的序列有N个元素I个逆序对则 </p>

<p><strong>插入排序：T( N, I ) = O( N+I )</strong></p>

<p>所以如果序列基本有序，则插入排序简单且高效</p>

<p>结论：<br/>
定理:任意N个不同元素组成的序列平均具有 N ( N - 1 ) / 4 个逆序对。<br/>
定理:任何仅以交换相邻两元素来排序的算 法，其平均时间复杂度为 \(\Omega\) ( N<sup>2</sup> )。<br/>
这意味着:要提高算法效率，我们必须 </p>

<ul>
<li>每次消去不止1个逆序对!</li>
<li>每次交换相隔较远的2个元素!</li>
</ul>

<h2 id="toc_4">希尔排序</h2>

<p>定义增量序列 DM &gt; DM-1 &gt; … &gt; D1 = 1<br/>
对每个 Dk 进行“Dk-间隔”排序( k = M, M-1, … 1 )<br/>
注意：“Dk-间隔”有序的序列，在执行“Dk-1-间隔”排序后，仍然是“Dk间隔”有序的</p>

<p><img src="media/15650106911020/15650150247137.jpg" alt=""/></p>

<p>原始希尔排序<code>DM = N / 2, Dk = Dk+1 / 2</code>希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的。此处我们做示例使用希尔增量。</p>

<pre><code class="language-text">void Shell_sort(ElementType A[], int N)
{
    for (D = N / 2; D &gt; 0; D /= 2) { /* 希尔增量序列 */
        for (P = D; P &lt; N; P++) { /* 插入排序 */
            Tmp = A[P];
            for (i = P; i &gt;= D &amp;&amp; A[iD] &gt; Tmp; i -= D)
                A[i] = A[i - D];
            A[i] = Tmp;
        }
    }
}
</code></pre>

<p>最坏情况：T = \(\Theta    \)( N<sup>2</sup> )</p>

<p>举个坏例子：<br/>
<img src="media/15650106911020/15650151790050.jpg" alt="" style="width:920px;"/><br/>
<img src="media/15650106911020/15650154742297.jpg" alt="" style="width:694px;"/></p>

<p>参考：<a href="https://blog.csdn.net/hellozhxy/article/details/79911867">十大经典排序算法最强总结</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring入门]]></title>
    <link href="blog.sajor.top/15647321562727.html"/>
    <updated>2019-08-02T15:49:16+08:00</updated>
    <id>blog.sajor.top/15647321562727.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Spring概述</h2>

<h3 id="toc_1">Spring是什么</h3>

<blockquote>
<p>Spring是分层的JavaSE/EE full-stack 轻量级开源框架，Rod Johnson在《Expert One-on-One:J2EE Design and Development》(2002年)提出一种新的编程思想，2003 年发布 了一个新的Java开发框架-SpringFramework</p>
</blockquote>

<p>Spring以IoC（Inverse of Control 控制反转）和 AOP（Aspect Oriented Programming 面向切面编程）为内核，使用基本的JavaBean来完成以前只可能由EJB完成的工作，取代了EJB的臃肿、低效的开发模式。</p>

<p>简单说 Spring 是一个轻量级的控制反转(IoC)和面向切面编程(AOP)的容器框架。 核心功能:</p>

<ol>
<li>bean实例管理 </li>
<li>bean之间依赖关系管理</li>
</ol>

<p>在实际开发中，通常服务器端在采用三层体系架构，分别为表示层(Web) 、业务逻辑层(Service)、持久层(Dao)， Spring对每一层都提供了技术支持。</p>

<table>
<thead>
<tr>
<th>架构</th>
<th>功能</th>
</tr>
</thead>

<tbody>
<tr>
<td>表示层</td>
<td>提供了与Struts等框架的整合</td>
</tr>
<tr>
<td>业务逻辑层</td>
<td>可以管理事务，记录日志等</td>
</tr>
<tr>
<td>持久层</td>
<td>可以整合Hibernate、JdbcTemplate等技术</td>
</tr>
</tbody>
</table>

<h3 id="toc_2">Spring框架的优点</h3>

<p>Spring具有简单、可测试和松耦合等特点。Spring不仅可以用于服务器端 开发，也可以应用于任何Java应用的开发中。</p>

<p>Spring框架七大优点</p>

<ol>
<li>非入侵式设计</li>
<li>方便解耦、简化开发</li>
<li>支持AOP</li>
<li>支持声明式事务处理</li>
<li>方便程序测试</li>
<li>方便集成各种优秀框架</li>
<li>降低Java EE API的使用难度</li>
</ol>

<h3 id="toc_3">Spring体系结构</h3>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从零开始SSM开发系列十三：使用 Mapper 接口方式整合 MyBatis-Spring]]></title>
    <link href="blog.sajor.top/15647300073307.html"/>
    <updated>2019-08-02T15:13:27+08:00</updated>
    <id>blog.sajor.top/15647300073307.html</id>
    <content type="html"><![CDATA[
<p>在上一章的基础上，继续使用c07包</p>

<p>1、创建新的 Package</p>

<blockquote>
<p>com.sajor.study.c07.user<br/>
com.sajor.study.c07.user.model:存放 vo 对象(业务模型对象) <br/>
com.sajor.study.c07.user.dao:存放 dao 对象(数据库访问对象) <br/>
com.sajor.study.c07.user.mapper:存放 mybatis 数据库表-对象映射文件 <br/>
com.sajor.study.c07.user.service:存放服务接口 <br/>
com.sajor.study.c07.user.service.impl:存放接口实现 </p>
</blockquote>

<p>创建完成，包结构如下:<br/>
<img src="media/15647300073307/15647302640035.jpg" alt="" style="width:278px;"/></p>

<p>2、在 model 包中创建一个 User 类</p>

<pre><code class="language-java">package com.sajor.study.c07.user.model;

import java.io.Serializable;

public class User implements Serializable {

    private static final long serialVersionUID = 1L;

    private int id = 20190802;
    private String name = &quot;&quot;;
    private String sex;
    private String email;

    @Override
    public String toString() {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(&quot;id=&quot;);
        stringBuffer.append(id);
        stringBuffer.append(&quot;\n&quot;);
        stringBuffer.append(&quot;name=&quot;);
        stringBuffer.append(name);
        return stringBuffer.toString();
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}
</code></pre>

<p>3、在 dao 包中创建一个接口 UserMapper</p>

<pre><code class="language-java">package com.sajor.study.c07.user.dao;

import com.sajor.study.c07.user.model.User;

import java.util.List;

public interface UserMapper {
    // 通过id查询
    public User findUserById(int id);

    // 添加
    public void addUser(User user);

    // 查询所有
    public List&lt;User&gt; findAllUsers();
}
</code></pre>

<p>4、在 mapper 包中创建一个映射文件 UserMapper.xml</p>

<pre><code class="language-java">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.sajor.study.c07.user.dao.UserMapper&quot;&gt;
    &lt;resultMap id=&quot;UserResultMap&quot; type=&quot;com.sajor.study.c07.user.model.User&quot;&gt;
        &lt;result column=&quot;id&quot; property=&quot;id&quot; jdbcType=&quot;BIGINT&quot;/&gt;
        &lt;result column=&quot;name&quot; property=&quot;name&quot; jdbcType=&quot;VARCHAR&quot;/&gt;
        &lt;result column=&quot;sex&quot; property=&quot;sex&quot; jdbcType=&quot;VARCHAR&quot;/&gt;
        &lt;result column=&quot;email&quot; property=&quot;email&quot; jdbcType=&quot;VARCHAR&quot;/&gt;
    &lt;/resultMap&gt;
    &lt;!--根据 id 查询用户信息 --&gt;
    &lt;select id=&quot;findUserById&quot; parameterType=&quot;java.lang.Integer&quot; resultMap=&quot;UserResultMap&quot;&gt;
        select * from USER where id = #{id}
    &lt;/select&gt;
    &lt;!--添加用户信息 --&gt;
    &lt;insert id=&quot;addUser&quot; parameterType=&quot;user&quot;&gt;
        insert into USER(name,sex,email)
        values(#{name},#{sex},#{email})
    &lt;/insert&gt;
    &lt;!--查询所有用户--&gt;
    &lt;select id=&quot;findAllUsers&quot; resultMap=&quot;UserResultMap&quot;&gt;
        select * from USER
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>

<p>5、在 service 包中创建一个服务接口 UserService</p>

<pre><code class="language-java">package com.sajor.study.c07.user.service;

import com.sajor.study.c07.user.model.User;

public interface UserService {
    // 通过id查询
    public User findUserById(int id); // 添加

    public void addUser(User user);

    public int getUsersCount();
}
</code></pre>

<p>6、在 service.impl 包中创建服务接口的实现类 UserServiceImpl</p>

<p>这里用到了注解方式:声明了 service、以及自动绑定(当然也可以在 spring 中声明 bean，以及把 userMapper 注入)</p>

<pre><code class="language-java">package com.sajor.study.c07.user.service.impl;

import com.sajor.study.c07.user.dao.UserMapper;
import com.sajor.study.c07.user.model.User;
import com.sajor.study.c07.user.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UserServiceImpl implements UserService {
    @Autowired
    private UserMapper userMapper;

    @Override
    public User findUserById(int id) {
        return userMapper.findUserById(id);
    }

    @Override
    public void addUser(User user) {
        userMapper.addUser(user);
    }

    @Override
    public int getUsersCount() {
        return userMapper.findAllUsers().size();
    }
}
</code></pre>

<p>7、新建一个 MyBatis 的核心配置文件 c07-mybatis-spring-config-mapper.xml</p>

<pre><code class="language-java">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--配置别名 --&gt;
    &lt;typeAliases&gt;
        &lt;!--定义 Mapper 中引用到的业务对象类的位置--&gt;
        &lt;package name=&quot;com.sajor.study.c07.user.model&quot;/&gt;
    &lt;/typeAliases&gt;
    &lt;!--配置 Mapper 的位置 --&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/sajor/study/c07/user/mapper/UserMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;

</code></pre>

<p>8、新建一个 Spring 配置文件 c07-spring-config-mybatisspring-mapper.xml</p>

<pre><code class="language-java">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;
    &lt;!--1. 定义数据源，mybatis 直接使用 spring 中定义的数据源--&gt;
    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
        &lt;property name=&quot;url&quot;
                  value=&quot;jdbc:mysql://localhost:3306/TestDB?autoReconnect=true&amp;amp;characterEncoding=utf8&amp;amp;useUnicode=true&amp;amp;useSSL=false&quot;/&gt;
        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;
    &lt;/bean&gt;
    &lt;!--2. 配置 MyBatis 工厂 --&gt;
    &lt;bean id=&quot;sqlSessionFactory&quot;
          class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;
        &lt;!--注入数据源 --&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
        &lt;!--指定核心配置文件位置 --&gt;
        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:c07-mybatis-spring-config-mapper.xml&quot;/&gt;
    &lt;/bean&gt;

    &lt;!--3. Mapper 代理开发(基于 MapperScannerConfigurer) --&gt;
    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;
        &lt;!--定义接口所在位置--&gt;
        &lt;property name=&quot;basePackage&quot; value=&quot;com.sajor.study.c07.user.dao&quot;/&gt;
    &lt;/bean&gt;
    &lt;!--4. 开启扫描 --&gt;
    &lt;context:component-scan base-package=&quot;com.sajor.study.c07.user.service&quot;/&gt;
&lt;/beans&gt;

</code></pre>

<p>9、创建测试类 MyBatisSpringMapperTest</p>

<pre><code class="language-java">package test.com.sajor.study.c07;

import com.sajor.study.c07.user.model.User;
import com.sajor.study.c07.user.service.UserService;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MyBatisSpringMapperTest {
    public static void main(String[] args) {
        try {
            ApplicationContext ctx =
                    new ClassPathXmlApplicationContext(&quot;c07-spring-config-mybatisspring-mapper.xml&quot;);
            UserService userService = (UserService) ctx.getBean(UserService.class);
            User user = userService.findUserById(2);
            System.out.println(user);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre>

<p>10、运行测试类</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从零开始SSM开发系列十二：使用 DAO 方式整合 MyBatis-Spring]]></title>
    <link href="blog.sajor.top/15647285252626.html"/>
    <updated>2019-08-02T14:48:45+08:00</updated>
    <id>blog.sajor.top/15647285252626.html</id>
    <content type="html"><![CDATA[
<p>1、引用 MyBatis-Spring 集成 jar 包</p>

<p>在工程中引用 mybatis-spring-1.3.1.jar包</p>

<p>点击 File&gt;Project Structure...，选中 Libraries，添加 java 引用</p>

<p><img src="media/15647285252626/15647286399391.jpg" alt="" style="width:1106px;"/></p>

<p>2、创建新的 Package</p>

<blockquote>
<p>com.sajor.study.c07<br/>
com.sajor.study.c07.dao <br/>
test.com.sajor.study.c07</p>
</blockquote>

<p>3、在 dao 包中创建一个 User 类</p>

<p>在类中声明id、name、sex和email属性，及其对应的getter/setter方法。</p>

<pre><code class="language-text">package com.sajor.study.c07.dao;

import java.io.Serializable;

public class User implements Serializable {
    private static final long serialVersionUID = 1L;
    private int id = 20190802;
    private String name = &quot;&quot;;
    private String sex;
    private String email;

    @Override
    public String toString() {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(&quot;id=&quot;);
        stringBuffer.append(id);
        stringBuffer.append(&quot;\n&quot;);
        stringBuffer.append(&quot;name=&quot;);
        stringBuffer.append(name);
        return stringBuffer.toString();
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}
</code></pre>

<p>4、在 dao 包中创建一个映射文件 UserMapper.xml</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.sajor.study.c07.dao.UserMapper&quot;&gt;
    &lt;resultMap id=&quot;UserResultMap&quot; type=&quot;com.sajor.study.c07.dao.User&quot;&gt;
        &lt;result column=&quot;id&quot; property=&quot;id&quot; jdbcType=&quot;BIGINT&quot;/&gt;
        &lt;result column=&quot;name&quot; property=&quot;name&quot; jdbcType=&quot;VARCHAR&quot;/&gt;
        &lt;result column=&quot;sex&quot; property=&quot;sex&quot; jdbcType=&quot;VARCHAR&quot;/&gt;
        &lt;result column=&quot;email&quot; property=&quot;email&quot; jdbcType=&quot;VARCHAR&quot;/&gt;
    &lt;/resultMap&gt;

    &lt;select id=&quot;findUserById&quot; parameterType=&quot;java.lang.Integer&quot; resultMap=&quot;UserResultMap&quot;&gt;
        &lt;!--根据 id 查询用户信息 --&gt;
        select * from USER where id = #{id,jdbcType=BIGINT}
    &lt;/select&gt;

    &lt;insert id=&quot;addUser&quot; parameterType=&quot;user&quot;&gt;
        &lt;!--添加用户信息 --&gt;
        insert into USER(name,sex,email)
        values(#{name},#{sex},#{email})
    &lt;/insert&gt;

    &lt;select id=&quot;findAllUsers&quot; resultMap=&quot;UserResultMap&quot;&gt;
        select * from USER
    &lt;/select&gt;

&lt;/mapper&gt;
</code></pre>

<p>5、在 dao 中创建一个 UserDAO 类</p>

<p>UserDAO 继承 SqlSessionDaoSupport</p>

<pre><code class="language-text">package com.sajor.study.c07.dao;

import org.mybatis.spring.support.SqlSessionDaoSupport;

public class UserDAO extends SqlSessionDaoSupport {
    // 通过id查询
    public User findUserById(Integer id) {
        return this.getSqlSession().selectOne( &quot;com.sajor.study.c07.dao.UserMapper.findUserById&quot;, id);
    }
}
</code></pre>

<p>6、创建 MyBatis 的核心配置文件 c07-mybatis-spring-config-dao.xml</p>

<p>对比前面 mybatis 的配置文件，这里不再需要配置数据源，直接使用 spring 里面配置的数据源即可。</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;

&lt;configuration&gt;
    &lt;!--配置别名 --&gt;
    &lt;typeAliases&gt;
        &lt;package name=&quot;com.sajor.study.c07.dao&quot;/&gt;
    &lt;/typeAliases&gt;
    &lt;!--配置 Mapper 的位置 --&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/sajor/study/c07/dao/UserMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>

<p>7、新建一个 Spring 配置文件 c07-spring-mybatis-config-dao.xml</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;
    &lt;!--1. 定义数据源，mybatis 直接使用 spring 中定义的数据源--&gt;
    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
        &lt;property name=&quot;url&quot;
                  value=&quot;jdbc:mysql://localhost:3306/TestDB?autoReconnect=true&amp;amp;characterEncoding=utf8&amp;amp;useUnicode=true&amp;amp;useSSL=false&quot;/&gt;
        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;
    &lt;/bean&gt;

    &lt;!--2. 配置 MyBatis 工厂 --&gt;
    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;
        &lt;!--注入数据源 --&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;
        &lt;!--指定核心配置文件位置 --&gt;
        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:c07-mybatis-spring-config-dao.xml&quot;/&gt;
    &lt;/bean&gt;

    &lt;!--3. 实例化 Dao --&gt;
    &lt;bean id=&quot;userDAO&quot; class=&quot;com.sajor.study.c07.dao.UserDAO&quot;&gt;
        &lt;!-- 注入 SqlSessionFactory 对象实例--&gt;
        &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre>

<p>8、创建测试类 MyBatisSpringDAOTest</p>

<pre><code class="language-text">package test.com.sajor.study.c07;

import com.sajor.study.c07.dao.User;
import com.sajor.study.c07.dao.UserDAO;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MyBatisSpringDAOTest {
    public static void main(String[] args) {
        try {
            ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;c07-spring-mybatis-config-dao.xml&quot;);
            UserDAO userDAO = (UserDAO) ctx.getBean(&quot;userDAO&quot;);
            User user = userDAO.findUserById(2);
            System.out.println(user);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre>

<p>9、运行测试类<br/>
<img src="media/15647285252626/15647299241064.jpg" alt="" style="width:985px;"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从零开始SSM开发系列十一：MyBatis 多对多关联关系]]></title>
    <link href="blog.sajor.top/15647140106325.html"/>
    <updated>2019-08-02T10:46:50+08:00</updated>
    <id>blog.sajor.top/15647140106325.html</id>
    <content type="html"><![CDATA[
<p>在上一章的基础上，我们还使用c06包接着添加功能。</p>

<p>1、数据库表准备<br/>
新建一个数据库表:jo􏰀b、j􏰀obresume 并添加几条数据</p>

<p>jo􏰀b 表</p>

<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
</tr>
</thead>

<tbody>
<tr>
<td>jobid</td>
<td>int</td>
<td>11（主键）</td>
</tr>
<tr>
<td>jobtitle</td>
<td>varchar</td>
<td>127</td>
</tr>
</tbody>
</table>

<p>jobresume表</p>

<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
</tr>
</thead>

<tbody>
<tr>
<td>id</td>
<td>int</td>
<td>11（主键）</td>
</tr>
<tr>
<td>jobid</td>
<td>int</td>
<td>11</td>
</tr>
<tr>
<td>resumeid</td>
<td>int</td>
<td>11</td>
</tr>
</tbody>
</table>

<p>2、在 model 包中创建 Job 类</p>

<pre><code class="language-text">package com.sajor.study.c06.model;

import java.util.List;

public class Job {
    private Integer jobId;
    private String jobTitle;
    private List&lt;Resume&gt; resumeList; // 岗位关联的简历

    @Override
    public String toString() {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(&quot;jobid=&quot;);
        stringBuffer.append(jobId);
        stringBuffer.append(&quot;\n&quot;);
        stringBuffer.append(&quot;jobtitle=&quot;);
        stringBuffer.append(jobTitle);
        for (Resume rs : resumeList) {
            stringBuffer.append(&quot;\n&quot;);
            stringBuffer.append(&quot;Resume:[&quot;);
            stringBuffer.append(rs.getResumeId());
            stringBuffer.append(&quot;,&quot;);
            stringBuffer.append(rs.getResumeName());
            stringBuffer.append(&quot;,&quot;);
            stringBuffer.append(rs.getResumeDesc());
            stringBuffer.append(&quot;]&quot;);
        }
        return stringBuffer.toString();
    }

    public Integer getJobId() {
        return jobId;
    }

    public void setJobId(Integer jobId) {
        this.jobId = jobId;
    }

    public String getJobTitle() {
        return jobTitle;
    }

    public void setJobTitle(String jobTitle) {
        this.jobTitle = jobTitle;
    }

    public List&lt;Resume&gt; getResumeList() {
        return resumeList;
    }

    public void setResumeList(List&lt;Resume&gt; resumeList) {
        this.resumeList = resumeList;
    }
}
</code></pre>

<p>3、在 mapper 包中创建映射文件 JobMapper.xml、修改 ResumeMapper.xml</p>

<p>JobMapper.xml</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;!-- namespace 表示命名空间 --&gt;
&lt;mapper namespace=&quot;com.sajor.study.c06.mapper.JobMapper&quot;&gt;

    &lt;!-- 多对多嵌套查询:通过执行另外一条 SQL 映射语句来返回预期的特殊类型 --&gt;
    &lt;select id=&quot;findJobWithResumesByID&quot; parameterType=&quot;Integer&quot; resultMap=&quot;JobWithResumeResult&quot;&gt;
        select * from job WHERE jobid=#{id}
    &lt;/select&gt;

    &lt;resultMap type=&quot;com.sajor.study.c06.model.Job&quot; id=&quot;JobWithResumeResult&quot;&gt;
        &lt;id property=&quot;jobId&quot; column=&quot;jobid&quot;/&gt;
        &lt;result property=&quot;jobTitle&quot; column=&quot;jobtitle&quot;/&gt;
        &lt;collection property=&quot;resumeList&quot; column=&quot;jobid&quot;
                    ofType=&quot;com.sajor.study.c06.model.Resume&quot;
                    select=&quot;com.sajor.study.c06.mapper.ResumeMapper.findResumeById&quot;&gt;&lt;/collection&gt;
    &lt;/resultMap&gt;

    &lt;!-- 多对多嵌套结果查询:查询某岗位及其关联的简历详情 --&gt;
    &lt;select id=&quot;findJobWithResumesByID2&quot; parameterType=&quot;Integer&quot; resultMap=&quot;JobWithResumeResult2&quot;&gt;
        select job.*,resume.*
        from job,resume,jobresume
        WHERE job.jobid=jobresume.jobid
        and resume.resumeid=jobresume.resumeid and job.jobid=#{id}
    &lt;/select&gt;

    &lt;!-- 自定义手动映射类型 --&gt;
    &lt;resultMap type=&quot;com.sajor.study.c06.model.Job&quot; id=&quot;JobWithResumeResult2&quot;&gt;
        &lt;id property=&quot;jobId&quot; column=&quot;jobid&quot;/&gt;
        &lt;result property=&quot;jobTitle&quot; column=&quot;jobtitle&quot;/&gt;
        &lt;!-- 多对多关联映射:collection --&gt;
        &lt;collection property=&quot;resumeList&quot;
                    ofType=&quot;com.sajor.study.c06.model.Resume&quot;&gt;
            &lt;id property=&quot;resumeId&quot; column=&quot;resumeid&quot;/&gt;
            &lt;result property=&quot;resumeName&quot; column=&quot;resumename&quot;/&gt;
            &lt;result property=&quot;resumeDesc&quot; column=&quot;resumedesc&quot;/&gt;
        &lt;/collection&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>

<p>ResumeMapper.xml</p>

<pre><code class="language-text">&lt;!--下面是新增内容:通过 jobid 查关联简历--&gt;
    &lt;select id=&quot;findResumeById&quot; parameterType=&quot;Integer&quot; resultType=&quot;com.sajor.study.c06.model.Resume&quot;&gt;
        SELECT * from Resume where resumeid IN(
            SELECT resumeid FROM jobresume WHERE jobid = #{id}
        )
    &lt;/select&gt;
</code></pre>

<p>4、修改配置文件 mybatis-config-c06-relation.xml</p>

<p>配置JobMapper.xml的位置</p>

<pre><code class="language-text">&lt;mapper resource=&quot;com/sajor/study/c06/mapper/JobMapper.xml&quot; /&gt;
</code></pre>

<p>5、修 改 Spring 配 置 文 件 spring-config-mybatis-c06-relation.xml</p>

<p>在 spring 配置文件中配置 bean</p>

<pre><code class="language-text">&lt;bean id=&quot;jobDAO&quot; class=&quot;com.sajor.study.c06.dao.JobDAO&quot;/&gt;
</code></pre>

<p>6、新建一个 DAO 类 JobDAO</p>

<p>对数据库进行关联查询</p>

<pre><code class="language-text">package com.sajor.study.c06.dao;

import com.sajor.study.c06.model.Job;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.InputStream;

public class JobDAO {
    /**
     * 根据用户编号查询用户及简历信息
     */
    public Job findJobsWithResumeByID(int id) throws Exception {
        // 1、读取配置文件
        String resource = &quot;mybatis-config-c06-relation.xml&quot;;
        InputStream inputStream = Resources.getResourceAsStream(resource);

        // 2、根据配置文件构建 SqlSessionFactory
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        // 3、通过 SqlSessionFactory 创建 SqlSession
        SqlSession sqlSession = sqlSessionFactory.openSession();

        // 4、SqlSession 执行映射文件中定义的 SQL，并返回映射结果
        Job job = sqlSession.selectOne(&quot;com.sajor.study.c06.mapper.JobMapper.findJobWithResumesByID&quot;, id);
//        Job job = sqlSession.selectOne(&quot;com.sajor.study.c06.mapper.JobMapper.findJobWithResumesByID2&quot;, id);

        // 5、关闭 SqlSession
        sqlSession.close();
        return job;
    }

}
</code></pre>

<p>7、修改测试类 MyBatisRelationTest</p>

<pre><code class="language-text">JobDAO jobDAO = (JobDAO) ctx.getBean(&quot;jobDAO&quot;);
Job job = jobDAO.findJobsWithResumeByID(2);
System.out.println(job);
</code></pre>

<p>8、运行测试类</p>

<p><img src="media/15647140106325/15647283462344.jpg" alt="" style="width:1335px;"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从零开始SSM开发系列十：MyBatis 一对多关联关系]]></title>
    <link href="blog.sajor.top/15647098694474.html"/>
    <updated>2019-08-02T09:37:49+08:00</updated>
    <id>blog.sajor.top/15647098694474.html</id>
    <content type="html"><![CDATA[
<p>在上一章的基础上，我们还使用c06包接着添加功能。</p>

<p>1、数据库表准备<br/>
新建一个数据库表:resume 并添加几条数据</p>

<p>resume 表</p>

<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
</tr>
</thead>

<tbody>
<tr>
<td>resumeid</td>
<td>int</td>
<td>11（主键）</td>
</tr>
<tr>
<td>userid</td>
<td>int</td>
<td>11</td>
</tr>
<tr>
<td>resumename</td>
<td>varchar</td>
<td>255</td>
</tr>
<tr>
<td>resumedesc</td>
<td>varchar</td>
<td>255</td>
</tr>
</tbody>
</table>

<p>2、在 model 包中创建 Resume 类</p>

<pre><code class="language-text">package com.sajor.study.c06.model;

public class Resume {
    private Integer resumeId;
    private Integer userId;
    private String resumeName;
    private String resumeDesc;

    public Integer getResumeId() {
        return resumeId;
    }

    public void setResumeId(Integer resumeId) {
        this.resumeId = resumeId;
    }

    public Integer getUserId() {
        return userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    public String getResumeName() {
        return resumeName;
    }

    public void setResumeName(String resumeName) {
        this.resumeName = resumeName;
    }

    public String getResumeDesc() {
        return resumeDesc;
    }

    public void setResumeDesc(String resumeDesc) {
        this.resumeDesc = resumeDesc;
    }
}
</code></pre>

<p>3、修改 User 类</p>

<p>1)添加 resumeList 属性及其 getter、setter</p>

<pre><code class="language-text">private List&lt;Resume&gt; resumeList;//个人关联的简历 
</code></pre>

<p>2)完善 toString 方法</p>

<pre><code class="language-text">package com.sajor.study.c06.model;

import java.util.List;

public class User {
    private int id = 20190801;
    private String name = &quot;&quot;;
    private String sex;
    private String email;

    private Card card; //个人关联的证件

    private List&lt;Resume&gt; resumeList;//个人关联的简历

    @Override
    public String toString() {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(&quot;id=&quot;);
        stringBuffer.append(id);
        stringBuffer.append(&quot;\n&quot;);
        stringBuffer.append(&quot;name=&quot;);
        stringBuffer.append(name);
        if (card != null) {
            stringBuffer.append(&quot;\n&quot;);
            stringBuffer.append(&quot;CardID=&quot;);
            stringBuffer.append(card.getId());
            stringBuffer.append(&quot;\n&quot;);
            stringBuffer.append(&quot;CardCode=&quot;);
            stringBuffer.append(card.getCode());
        }
        for (Resume rs : resumeList) {
            stringBuffer.append(&quot;\n&quot;);
            stringBuffer.append(&quot;Resume:[&quot;);
            stringBuffer.append(rs.getResumeId());
            stringBuffer.append(&quot;,&quot;);
            stringBuffer.append(rs.getResumeName());
            stringBuffer.append(&quot;,&quot;);
            stringBuffer.append(rs.getResumeDesc());
            stringBuffer.append(&quot;]&quot;);
        }
        return stringBuffer.toString();
    }

    public List&lt;Resume&gt; getResumeList() {
        return resumeList;
    }

    public void setResumeList(List&lt;Resume&gt; resumeList) {
        this.resumeList = resumeList;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public Card getCard() {
        return card;
    }

    public void setCard(Card card) {
        this.card = card;
    }
}
</code></pre>

<p>4、创建简历映射文件 ResumeMapper.xml</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;!-- namespace 表示命名空间 --&gt;
&lt;mapper namespace=&quot;com.sajor.study.c06.mapper.ResumeMapper&quot;&gt;
    &lt;select id=&quot;findResumeByUserId&quot; parameterType=&quot;Integer&quot; resultType=&quot;com.sajor.study.c06.model.Resume&quot;&gt;
        SELECT * from Resume where userid = #{id}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>

<p>5、修改映射文件 UserMapper.xml</p>

<p>添加相应方法(将下列代码添加到<mapper>标签里):</p>

<pre><code class="language-text">&lt;!--下面是新增对简历的查询--&gt;

    &lt;!-- 一对多:查看某一用户及其关联的简历信息 注意:子查询方式 --&gt;
    &lt;select id=&quot;findUserWithResumesByID&quot; parameterType=&quot;Integer&quot;
            resultMap=&quot;UserWithResumesResult&quot;&gt;
        SELECT user.* from user WHERE user.id=#{id}
    &lt;/select&gt;
    &lt;resultMap type=&quot;com.sajor.study.c06.model.User&quot; id=&quot;UserWithResumesResult&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
        &lt;result property=&quot;sex&quot; column=&quot;sex&quot;/&gt;
        &lt;result property=&quot;email&quot; column=&quot;email&quot;/&gt;
        &lt;!-- 一对多关联映射:collection
            ofType 表示属性集合中元素的类型，List&lt;Resume&gt;属性即 Resume 类 --&gt;
        &lt;collection property=&quot;resumeList&quot; column=&quot;id&quot;
                    ofType=&quot;com.sajor.study.c06.model.Resume&quot;
                    select=&quot;com.sajor.study.c06.mapper.ResumeMapper.findResumeByUserId&quot;&gt;
            &lt;id property=&quot;resumeId&quot; column=&quot;resumeid&quot;/&gt;
            &lt;result property=&quot;userId&quot; column=&quot;userid&quot;/&gt;
            &lt;result property=&quot;resumeName&quot; column=&quot;resumename&quot;/&gt;
            &lt;result property=&quot;resumeDesc&quot; column=&quot;resumedesc&quot;/&gt;
        &lt;/collection&gt;
    &lt;/resultMap&gt;

    &lt;!-- 一对多:查看某一用户及其关联的简历信息
    注意:当关联查询出的列名相同，则需要使用别名区分(比如:表名.列名 as 列的别名) --&gt;
    &lt;select id=&quot;findUserWithResumesByID2&quot; parameterType=&quot;Integer&quot; resultMap=&quot;UserWithResumesResult2&quot;&gt;
        SELECT user.*,resume.* from user,resume WHERE user.id=resume.userid and user.id=#{id}
    &lt;/select&gt;
    &lt;resultMap type=&quot;com.sajor.study.c06.model.User&quot; id=&quot;UserWithResumesResult2&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
        &lt;result property=&quot;sex&quot; column=&quot;sex&quot;/&gt;
        &lt;result property=&quot;email&quot; column=&quot;email&quot;/&gt;
        &lt;!-- 一对多关联映射:collection
            ofType 表示属性集合中元素的类型，List&lt;Resume&gt;属性即 Resume 类 --&gt;
        &lt;collection property=&quot;resumeList&quot; ofType=&quot;com.sajor.study.c06.model.Resume&quot;&gt;
            &lt;id property=&quot;resumeId&quot; column=&quot;resumeid&quot;/&gt;
            &lt;result property=&quot;userId&quot; column=&quot;userid&quot;/&gt;
            &lt;result property=&quot;resumeName&quot; column=&quot;resumename&quot;/&gt;
            &lt;result property=&quot;resumeDesc&quot; column=&quot;resumedesc&quot;/&gt;
        &lt;/collection&gt;
    &lt;/resultMap&gt;
</code></pre>

<p>6、修改配置文件 mybatis-config-c06-relation.xml</p>

<p>配置ResumeMapper.xml的位置(在<mappers>标签中添加如下代码)：</p>

<pre><code class="language-text">&lt;mapper resource=&quot;com/sajor/study/c06/mapper/ResumeMapper.xml&quot;/&gt;
</code></pre>

<p>7、修改 UserDAO 类</p>

<p>添加响应方法(添加到UserDAO类里)。</p>

<pre><code class="language-text">
    //下面是新增方法

    /**
     * 根据用户编号查询用户及简历信息
     */
    public User findUserWithResumesByID(int id) throws Exception {
        // 1、读取配置文件
        String resource = &quot;mybatis-config-c06-relation.xml&quot;;
        InputStream inputStream = Resources.getResourceAsStream(resource);

        // 2、根据配置文件构建 SqlSessionFactory
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        // 3、通过 SqlSessionFactory 创建 SqlSession
        SqlSession sqlSession = sqlSessionFactory.openSession();

        // 4、SqlSession 执行映射文件中定义的 SQL，并返回映射结果
//        User user = sqlSession.selectOne(&quot;com.sajor.study.c06.mapper.UserMapper.findUserWithResumesByID&quot;, id);
        User user = sqlSession.selectOne(&quot;com.sajor.study.c06.mapper.UserMapper.findUserWithResumesByID2&quot;, id);
        // 5、关闭 SqlSession
        sqlSession.close();
        return user;
    }
</code></pre>

<p>8、修改测试类 MyBatisRelationTest</p>

<pre><code class="language-text">//            User user = userDAO.findUserById(2);
            User user = userDAO.findUserWithResumesByID(2);
</code></pre>

<p>9、运行测试类<br/>
 <img src="media/15647098694474/15647139309257.jpg" alt="" style="width:576px;"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从零开始SSM开发系列九：MyBatis 一对一关联关系]]></title>
    <link href="blog.sajor.top/15643240518555.html"/>
    <updated>2019-07-28T22:27:31+08:00</updated>
    <id>blog.sajor.top/15643240518555.html</id>
    <content type="html"><![CDATA[
<p>1、数据库表准备</p>

<p>新建一个数据库表:card 并添加几条数据</p>

<p>Card 表</p>

<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
</tr>
</thead>

<tbody>
<tr>
<td>id</td>
<td>int</td>
<td>11（主键）</td>
</tr>
<tr>
<td>code</td>
<td>varchar</td>
<td>18</td>
</tr>
</tbody>
</table>

<p>2、创建新的 Package</p>

<blockquote>
<p>com.sajor.study.c06<br/>
com.sajor.study.c06.model : 存放 vo 对象(业务模型对象) <br/>
com.sajor.study.c06.dao : 存放 dao 对象(数据库访问对象) <br/>
com.sajor.study.mapper : 存放 mybatis 数据库表-对象映射文件 <br/>
test.com.sajor.study.c06 </p>
</blockquote>

<p>创建完成，包结构如下:</p>

<p><img src="media/15643240518555/15646746698065.jpg" alt="" style="width:314px;"/></p>

<p>3、在 model 包中创建 User 类，Card 类</p>

<p>User 类</p>

<pre><code class="language-text">package com.sajor.study.c06.model;

public class User {
    private int id = 20190801;
    private String name = &quot;&quot;;
    private String sex;
    private String email;

    private Card card; //个人关联的证件

    @Override
    public String toString() {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(&quot;id=&quot;);
        stringBuffer.append(id);
        stringBuffer.append(&quot;\n&quot;);
        stringBuffer.append(&quot;name=&quot;);
        stringBuffer.append(name);
        stringBuffer.append(&quot;\n&quot;);
        stringBuffer.append(&quot;CardID=&quot;);
        stringBuffer.append(card.getId());
        stringBuffer.append(&quot;\n&quot;);
        stringBuffer.append(&quot;CardCode=&quot;);
        stringBuffer.append(card.getCode());
        return stringBuffer.toString();
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public Card getCard() {
        return card;
    }

    public void setCard(Card card) {
        this.card = card;
    }
}
</code></pre>

<p>Card 类</p>

<pre><code class="language-text">package com.sajor.study.c06.model;

public class Card {
    private Integer id;
    private String code;

    @Override
    public String toString() {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(&quot;Card [CardId=&quot;);
        stringBuffer.append(id);
        stringBuffer.append(&quot;, CardCode=&quot;);
        stringBuffer.append(code);
        stringBuffer.append(&quot;]&quot;);
        return stringBuffer.toString();
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }
}
</code></pre>

<p>4、在 mapper 包中创建映射文件 UserMapper.xml、 CardMapper.xml</p>

<p>UserMapper.xml</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;!-- namespace 表示命名空间 --&gt;
&lt;mapper namespace=&quot;com.sajor.study.c06.mapper.UserMapper&quot;&gt;

    &lt;select id=&quot;findUserById&quot; parameterType=&quot;Integer&quot; resultMap=&quot;CardWithUserResult&quot;&gt;
        SELECT * from USER where id=#{id}
    &lt;/select&gt;


    &lt;resultMap type=&quot;com.sajor.study.c06.model.User&quot; id=&quot;CardWithUserResult&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
        &lt;result property=&quot;sex&quot; column=&quot;sex&quot;/&gt;
        &lt;result property=&quot;email&quot; column=&quot;email&quot;/&gt;
        &lt;!-- 一对一:association 使用 select 属性引入另外一条 SQL 语句 --&gt;
        &lt;association property=&quot;card&quot; column=&quot;id&quot; javaType=&quot;com.sajor.study.c06.model.Card&quot;
                     select=&quot;com.sajor.study.c06.mapper.CardMapper.findCodeById&quot;/&gt;
    &lt;/resultMap&gt;


    &lt;!-- 嵌套结果:使用嵌套结果映射来处理重复的联合结果的子集 --&gt;
    &lt;select id=&quot;findUserById2&quot; parameterType=&quot;Integer&quot; resultMap=&quot;CardWithUserResult2&quot;&gt;
        SELECT user.*,card.code from user,card
        where user.id=card.id and user.id= #{id}
    &lt;/select&gt;

    &lt;resultMap type=&quot;com.sajor.study.c06.model.User&quot; id=&quot;CardWithUserResult2&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;
        &lt;result property=&quot;sex&quot; column=&quot;sex&quot;/&gt;
        &lt;result property=&quot;email&quot; column=&quot;email&quot;/&gt;
        &lt;association property=&quot;card&quot; javaType=&quot;com.sajor.study.c06.model.Card&quot;&gt;
            &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
            &lt;result property=&quot;code&quot; column=&quot;code&quot;/&gt;
        &lt;/association&gt;
    &lt;/resultMap&gt;
&lt;/mapper&gt;
</code></pre>

<p>CardMapper.xml</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;!-- namespace 表示命名空间 --&gt;
&lt;mapper namespace=&quot;com.sajor.study.c06.mapper.CardMapper&quot;&gt;
    &lt;select id=&quot;findCodeById&quot; parameterType=&quot;Integer&quot;
            resultType=&quot;com.sajor.study.c06.model.Card&quot;&gt;
        SELECT * from card where id=#{id}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre>

<p>5、新建一个 MyBatis 的核心配置文件 mybatis-config-c06-relation.xml</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--1.配置环境 ，默认的环境id为msql--&gt;
    &lt;environments default=&quot;dev&quot;&gt;

        &lt;!--1.2.配置 id 为 mysql 的数据库环境 --&gt;
        &lt;environment id=&quot;dev&quot;&gt;

            &lt;!-- 使用 JDBC 的事务管理 --&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;

            &lt;!--数据库连接池 --&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot;
                          value=&quot;jdbc:mysql://localhost:3306/TestDB?autoReconnect=true&amp;amp;characterEncoding=utf8&amp;amp;useUnicode=true&amp;amp;useSSL=false&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;

    &lt;!--2.配置 Mapper 的位置 --&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/sajor/study/c06/mapper/UserMapper.xml&quot;/&gt;
        &lt;mapper resource=&quot;com/sajor/study/c06/mapper/CardMapper.xml&quot;/&gt;

    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>

<p>6、新建一个 Spring 配置文件 spring-config-mybatis-c06-relation.xml</p>

<p>在 spring 配置文件中配置 bean</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

        &lt;bean id=&quot;userDAO&quot; class=&quot;com.sajor.study.c06.dao.UserDAO&quot; /&gt;
        &lt;bean id=&quot;user&quot; class=&quot;com.sajor.study.c06.model.User&quot; /&gt; &lt;bean id=&quot;card&quot; class=&quot;com.sajor.study.c06.model.Card&quot; /&gt;
&lt;/beans&gt;
</code></pre>

<p>7、新建一个 DAO 类 UserDAO</p>

<p>对数据库进行关联查询</p>

<pre><code class="language-text">package com.sajor.study.c06.dao;

import com.sajor.study.c06.model.User;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.apache.ibatis.session.SqlSessionManager;

import java.io.InputStream;

public class UserDAO {
    /**
     * 根据用户编号查询用户信息
     */
    public User findUserById(int id) throws Exception {
        // 1、读取配置文件
        String resource = &quot;mybatis-config-c06-relation.xml&quot;;
        InputStream inputStream =
                Resources.getResourceAsStream(resource);
        // 2、根据配置文件构建 SqlSessionFactory
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        // 3、通过 SqlSessionFactory 创建 SqlSession

        SqlSession sqlSession = sqlSessionFactory.openSession();
        // 4、SqlSession 执行映射文件中定义的 SQL，并返回映射结果
        User user = sqlSession.selectOne(&quot;com.sajor.study.c06.mapper.UserMapper.findUserById&quot;, id);

        //User user = sqlSession.selectOne(&quot;com.sajor.study.c06.mapper.UserMapper.findUserById2&quot;, id);
        // 5、关闭 SqlSession
        sqlSession.close();
        return user;
    }
}
</code></pre>

<p>8、创建测试类 MyBatisRelationTest</p>

<pre><code class="language-text">package test.com.sajor.study.c06;

import com.sajor.study.c06.dao.UserDAO;
import com.sajor.study.c06.model.User;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MyBatisRelationTest {
    public static void main(String[] args) {
        try {
            ApplicationContext ctx =
                    new ClassPathXmlApplicationContext(&quot;spring-config-mybatis-c06-relation.xml&quot;);
            UserDAO userDAO = (UserDAO) ctx.getBean(&quot;userDAO&quot;);
            User user = userDAO.findUserById(2);
            System.out.println(user);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre>

<p>9、运行测试类<br/>
<img src="media/15643240518555/15647098563873.jpg" alt="" style="width:973px;"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从零开始SSM开发系列八：MyBatis 入门]]></title>
    <link href="blog.sajor.top/15643212338496.html"/>
    <updated>2019-07-28T21:40:33+08:00</updated>
    <id>blog.sajor.top/15643212338496.html</id>
    <content type="html"><![CDATA[
<p>1、配置 MyBatis 开发环境</p>

<p>在工程里面引用 MyBatis 核心 jar 包，以及 MyBatis 依赖的第三方 jar 包。<br/>
点击 File&gt;Project Structure...，选中 Libraries，添加 java 引用<br/>
选择 l􏰀ib 中的 􏰁Mybatis-3.4.5.jar 包。</p>

<p>再次添加 java 引用，选中 lib 中的 mybatis-3.4.5-lib 文件夹<br/>
确认。MyBatis 开发环境即搭建好了。</p>

<p><img src="media/15643212338496/15643213413978.jpg" alt="" style="width:1024px;"/></p>

<p>2、创建新的 Package</p>

<blockquote>
<p>com.sajor.study.c05<br/>
com.sajor.study.c05.model:存放 vo 对象(业务模型对象) <br/>
com.sajor.study.c05.dao:存放 dao 对象(数据库访问对象) <br/>
com.sajor.study.c05.mapper:存放 mybatis 数据库表-对象映射文件 <br/>
test.com.sajor.study.c05<br/>
创建完成，包结构如下:</p>
</blockquote>

<p><img src="media/15643212338496/15643214751761.jpg" alt="" style="width:338px;"/></p>

<p>3、在 model 包中创建一个 User 类<br/>
在类中声明id、name、sex和email属性，及其对应的getter/setter方法。</p>

<pre><code class="language-text">package com.sajor.study.c05.model;

public class User {
    private int id = 20180101;
    private String name = &quot;&quot;;
    private String sex;
    private String email;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Override
    public String toString() {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(&quot;id=&quot;);
        stringBuffer.append(id);
        stringBuffer.append(&quot;\n&quot;);
        stringBuffer.append(&quot;name=&quot;);
        stringBuffer.append(name);
        return stringBuffer.toString();
    }
}
</code></pre>

<p>4、在 mapper 包中创建一个映射文件 UserMapper.xml</p>

<p>定义 SQL;<br/>
 1)根据用户编号获取用户信息;<br/>
 2)根据用户名模糊查询用户信息列表;<br/>
 3) 添加用户信息;<br/>
 4)更新用户信息;<br/>
 5)删除用户</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;!-- namespace 表示命名空间 --&gt;
&lt;mapper namespace=&quot;com.sajor.study.c05.mapper.UserMapper&quot;&gt;

    &lt;!--根据用户编号获取用户信息 --&gt;
    &lt;select id=&quot;findUserById&quot; parameterType=&quot;Integer&quot; resultType=&quot;com.sajor.study.c05.model.User&quot;&gt;
        select * from USER where id = #{id}
    &lt;/select&gt;

    &lt;!--根据用户名模糊查询用户信息列表--&gt;
    &lt;select id=&quot;findUserByName&quot; parameterType=&quot;String&quot; resultType=&quot;com.sajor.study.c05.model.User&quot;&gt;
        select * from USER where name like concat(&#39;%&#39;,#{value},&#39;%&#39;)
    &lt;/select&gt;

    &lt;!-- 添加用户信息 --&gt;
    &lt;insert id=&quot;addUser&quot; parameterType=&quot;com.sajor.study.c05.model.User&quot;&gt;
        insert into USER(name,sex,email) values(#{name},#{sex},#{email})
    &lt;/insert&gt;

    &lt;!-- 更新用户信息 --&gt;
    &lt;update id=&quot;updateUser&quot; parameterType=&quot;com.sajor.study.c05.model.User&quot;&gt;
        update USER set name=#{name},sex=#{sex},email=#{email} where id=#{id}
    &lt;/update&gt;

    &lt;!-- 删除用户 --&gt;
    &lt;delete id=&quot;deleteUser&quot; parameterType=&quot;Integer&quot;&gt;
        delete from USER where id=#{id}
    &lt;/delete&gt;
&lt;/mapper&gt;

</code></pre>

<p>5、创建 MyBatis 的核心配置文件 mybatis-config.xml</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!--1.配置环境 ，默认的环境为mysql--&gt;
    &lt;environments default=&quot;dev&quot;&gt;
        &lt;!--1.2.配置 id 为 mysql 的数据库环境 --&gt;
        &lt;environment id=&quot;dev&quot;&gt;

            &lt;!-- 使用 JDBC 的事务管理 --&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;

            &lt;!--数据库连接池 --&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
                &lt;property name=&quot;url&quot;
                          value=&quot;jdbc:mysql://localhost:3306/TestDB?autoReconnect=true&amp;amp;characterEncoding=utf8&amp;amp;useUnicode=true&amp;amp;useSSL=false&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;

    &lt;!--2.配置 Mapper 的位置 --&gt;
    &lt;mappers&gt;
        &lt;mapper resource=&quot;com/sajor/study/c05/mapper/UserMapper.xml&quot;/&gt;
    &lt;/mappers&gt;
&lt;/configuration&gt;
</code></pre>

<p>6、创建一个 DAO 类 UserDAO</p>

<p>对数据库进行增删改查</p>

<pre><code class="language-text">package com.sajor.study.c05.dao;

import com.sajor.study.c05.model.User;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.InputStream;
import java.util.List;

public class UserDAO {
    /**
     * 根据用户编号查询用户信息
     */

    public User findUserById(int id) throws Exception {

        // 1、读取配置文件
        String resource = &quot;mybatis-config.xml&quot;;
        InputStream inputStream = Resources.getResourceAsStream(resource);

        // 2、根据配置文件构建 SqlSessionFactory
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        // 3、通过 SqlSessionFactory 创建 SqlSession
        SqlSession sqlSession = sqlSessionFactory.openSession();

        // 4、SqlSession 执行映射文件中定义的 SQL，并返回映射结果
        User user = sqlSession.selectOne(&quot;com.sajor.study.c05.mapper.UserMapper.findUserById&quot;, id);

        // 5、关闭 SqlSession
        sqlSession.close();
        return user;
    }

    /**
     * 根据用户名称来模糊查询用户信息列表
     */
    public List&lt;User&gt; findUserByName(String s) throws Exception {

        // 1、读取配置文件
        String resource = &quot;mybatis-config.xml&quot;;
        InputStream inputStream = Resources.getResourceAsStream(resource);

        // 2、根据配置文件构建 SqlSessionFactory
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        // 3、通过 SqlSessionFactory 创建 SqlSession
        SqlSession sqlSession = sqlSessionFactory.openSession();

        // 4、SqlSession 执行映射文件中定义的 SQL，并返回映射结果
        List&lt;User&gt; users = sqlSession.selectList(&quot;com.sajor.study.c05.mapper.UserMapper.findUserByName&quot;, s);

        // 5、关闭 SqlSession
        sqlSession.close();
        return users;
    }

    /**
     * 添加用户
     */
    public void addUser(User user) throws Exception {
        // 1、读取配置文件
        String resource = &quot;mybatis-config.xml&quot;;
        InputStream inputStream = Resources.getResourceAsStream(resource);

        // 2、根据配置文件构建 SqlSessionFactory
        SqlSessionFactory sqlSessionFactory =
                new SqlSessionFactoryBuilder().build(inputStream);

        // 3、通过 SqlSessionFactory 创建 SqlSession
        SqlSession sqlSession = sqlSessionFactory.openSession();

        // 4、SqlSession 执行添加操作
        // 4.1 执行 SqlSession 的插入方法，返回的是 SQL 语句影响的行数
        int rows = sqlSession.insert(&quot;com.sajor.study.c05.mapper.UserMapper.addUser&quot;, user);

        // 4.2 通过返回结果判断插入操作是否执行成功
        if (rows &gt; 0) {
            System.out.println(&quot;您成功插入了&quot; + rows + &quot;条数据!&quot;);
        } else {
            System.out.println(&quot;执行插入操作失败!!!&quot;);
        }

        // 4.3 提交事务
        sqlSession.commit();

        // 5、关闭 SqlSession
        sqlSession.close();
    }

    /**
     * 更新用户
     */
    public void updateUser(User user) throws Exception {
        // 1、读取配置文件
        String resource = &quot;mybatis-config.xml&quot;;
        InputStream inputStream = Resources.getResourceAsStream(resource);

        // 2、根据配置文件构建 SqlSessionFactory
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        // 3、通过 SqlSessionFactory 创建 SqlSession
        SqlSession sqlSession = sqlSessionFactory.openSession(); // 4、SqlSession 执行更新操作

        // 4.1 执行 SqlSession 的更新方法，返回的是 SQL 语句影响的行数
        int rows = sqlSession.update(&quot;com.sajor.study.c05.mapper.UserMapper.updateUser&quot;, user);

        // 4.2 通过返回结果判断更新操作是否执行成功
        if (rows &gt; 0) {
            System.out.println(&quot;您成功修改了&quot; + rows + &quot;条数据!&quot;);
        } else {
            System.out.println(&quot;执行修改操作失败!!!&quot;);
        }

        // 4.3 提交事务
        sqlSession.commit();

        // 5、关闭 SqlSession
        sqlSession.close();
    }

    /**
     * 删除用户
     */
    public void deleteUser(int id) throws Exception {
        // 1、读取配置文件
        String resource = &quot;mybatis-config.xml&quot;;
        InputStream inputStream = Resources.getResourceAsStream(resource);

        // 2、根据配置文件构建 SqlSessionFactory
        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);

        // 3、通过 SqlSessionFactory 创建 SqlSession
        SqlSession sqlSession = sqlSessionFactory.openSession();

        // 4、SqlSession 执行删除操作
        // 4.1 执行 SqlSession 的删除方法，返回的是 SQL 语句影响的行数
        int rows = sqlSession.delete(&quot;com.sajor.study.c05.mapper.UserMapper.deleteUser&quot;, id);

        // 4.2 通过返回结果判断删除操作是否执行成功
        if (rows &gt; 0) {
            System.out.println(&quot;您成功删除了&quot; + rows + &quot;条数据!&quot;);
        } else {
            System.out.println(&quot;执行删除操作失败!!!&quot;);
        }

        // 4.3 提交事务
        sqlSession.commit();

        // 5、关闭 SqlSession
        sqlSession.close();
    }
}
</code></pre>

<p>7、新建一个 Spring 配置文件 spring-config-mybatis.xml<br/>
在 spring 配置文件中配置 bean </p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;
    &lt;bean id=&quot;userDAO&quot; class=&quot;com.sajor.study.c05.dao.UserDAO&quot; /&gt;
    &lt;bean id=&quot;user&quot; class=&quot;com.sajor.study.c05.model.User&quot; /&gt;
&lt;/beans&gt;
</code></pre>

<p>8、创建测试类 MyBatisTest</p>

<p>先使用插入数据部分插入几条数据，之后再查询、修改、删除。</p>

<pre><code class="language-text">package test.com.sajor.study.c05;

import com.sajor.study.c05.dao.UserDAO;
import com.sajor.study.c05.model.User;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.util.List;

public class MyBatisTest {
    public static void main(String[] args) {
        try {
            ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;spring-config-mybatis.xml&quot;);

            // 按id查找数据
            UserDAO userDAO = (UserDAO) ctx.getBean(&quot;userDAO&quot;);
            User user = userDAO.findUserById(2);
            System.out.println(user);

            // 按名字查找数据
            List&lt;User&gt; users = userDAO.findUserByName(&quot;萧&quot;);
            for (User u : users) {
                System.out.println(u);
            }


            // 插入数据
//            UserDAO userDAO = (UserDAO) ctx.getBean(&quot;userDAO&quot;);
//            User user = (User) ctx.getBean(&quot;user&quot;);
//            user.setName(&quot;萧大侠&quot;);
//            user.setSex(&quot;11&quot;);
//            user.setEmail(&quot;xiaodaxia@cn.cn&quot;);
//            userDAO.addUser(user);


//            // 修改数据
//            UserDAO userDAO = (UserDAO) ctx.getBean(&quot;userDAO&quot;);
//            User user = (User) ctx.getBean(&quot;user&quot;);
//            user.setId(2);
//            user.setName(&quot;萧大侠gai&quot;);
//            user.setSex(&quot;01&quot;);
//            user.setEmail(&quot;xiaodaxia@cn.cn&quot;);
//            userDAO.updateUser(user);

            // 删除数据
//            UserDAO userDAO = (UserDAO) ctx.getBean(&quot;userDAO&quot;);
//            userDAO.deleteUser(1);


        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre>

<p>9、运行测试类</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从零开始SSM开发系列七：事务管理]]></title>
    <link href="blog.sajor.top/15643155536877.html"/>
    <updated>2019-07-28T20:05:53+08:00</updated>
    <id>blog.sajor.top/15643155536877.html</id>
    <content type="html"><![CDATA[
<p>1、Spring 配置文件中声明事务</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;

    &lt;bean id=&quot;student&quot; class=&quot;com.sajor.study.c01.Student&quot;&gt;
    &lt;/bean&gt;
    &lt;bean id=&quot;school&quot; class=&quot;com.sajor.study.c01.School&quot;&gt;
        &lt;property name=&quot;students&quot; ref=&quot;student&quot;/&gt;
    &lt;/bean&gt;

    &lt;!-- 1.配置数据源 --&gt;
    &lt;bean id=&quot;dataSourceJDBC&quot;
          class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
        &lt;property name=&quot;url&quot;
                  value=&quot;jdbc:mysql://localhost:3306/TestDB?autoReconnect=true&amp;amp;characterEncoding=utf8&amp;amp;useUnicode=true&amp;amp;useSSL=false&quot;/&gt;
        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;
    &lt;/bean&gt;

    &lt;!-- 2.配置 JDBC 模板 --&gt;
    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSourceJDBC&quot;/&gt;
    &lt;/bean&gt;

    &lt;!--3.定义使用 jdbc 模板的 jdbcTemplateUtil 类 --&gt;
    &lt;bean id=&quot;jdbcTemplateUtil&quot; class=&quot;com.sajor.study.c04.JdbcTemplateUtil&quot;&gt;
        &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;/&gt;
    &lt;/bean&gt;

    &lt;!--4.JDBC 事务管理器，依赖于数据源--&gt;
    &lt;bean id=&quot;transactionManagerJDBC&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSourceJDBC&quot;/&gt;
    &lt;/bean&gt;

    &lt;!-- 5.编写通知:对事务进行增强(通知),需要编写对切入点和具体执行事务细节 --&gt;
    &lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManagerJDBC&quot;&gt;
        &lt;tx:attributes&gt;
            &lt;!-- name:*表示任意方法名称 --&gt;
            &lt;tx:method name=&quot;*&quot; propagation=&quot;REQUIRED&quot; isolation=&quot;DEFAULT&quot;
                       read-only=&quot;false&quot;/&gt;
        &lt;/tx:attributes&gt;
    &lt;/tx:advice&gt;

    &lt;!-- 6.编写 aop，让 spring 自动对目标生成代理，需要使用 AspectJ 的表达式 --&gt;
    &lt;aop:config&gt;
        &lt;!-- 切入点 --&gt;
        &lt;aop:pointcut expression=&quot;execution(* com.sajor.study.c04.JdbcTemplateUtil.addUser(..))&quot;
                      id=&quot;txPointCut&quot;/&gt;
        &lt;!-- 切面:将切入点与通知整合 --&gt;
        &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;txPointCut&quot;/&gt;
    &lt;/aop:config&gt;

&lt;/beans&gt;
</code></pre>

<p>2、在 JdbcTemplateUtil.addUser()方法中添加一个错误<br/>
验证事务是否起作用</p>

<pre><code class="language-text">public void addUser(Student student) {
        String sql = &quot;insert into user (name,sex,email) values(?,?,?)&quot;;
        jdbcTemplate.update(sql, student.getName(), student.getSex(), student.getEmail());
        errorTest.length();//故意执行一个未初始化对象的方法
    }
</code></pre>

<p>3、运行测试类</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从零开始SSM开发系列六：数据库开发]]></title>
    <link href="blog.sajor.top/15643143335228.html"/>
    <updated>2019-07-28T19:45:33+08:00</updated>
    <id>blog.sajor.top/15643143335228.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">创建MySQL数据库</h2>

<p>首先进入MySQL数据库创建 <strong>TestDB</strong> 数据库</p>

<pre><code class="language-text">create database TestDB charset=utf8;
</code></pre>

<p><img src="media/15643143335228/15643149566034.jpg" alt="" style="width:585px;"/></p>

<p>到IDEA右侧点击Database，之后点击加号添加数据库，选择Data Source&gt;MySQL 填写连接信息<br/>
<img src="media/15643143335228/15643225927422.jpg" alt="" style="width:1440px;"/></p>

<p>填写好数据库信息后点击 Download 下载驱动包，下载完成后点击Test Connection 测试连接情况，之后点击ok。<br/>
<img src="media/15643143335228/15643225034011.jpg" alt="" style="width:800px;"/></p>

<p><strong>注意</strong></p>

<blockquote>
<p>如果你要直接粘贴下面代码的话，请记得修改这些内容<br/>
数据库名： TestDB<br/>
数据库用户： root<br/>
数据库密码： 123456</p>
</blockquote>

<h2 id="toc_1">创建项目</h2>

<p>1、引用 MySQL 数据库 jar 包<br/>
点击 File&gt;Project Structure...，选中 Libraries，添加 java 引用<br/>
在 lib 中选择 mysql-connector-java-5.x.x.jar确认</p>

<p>2、创建两个新的包</p>

<blockquote>
<p>com.sajor.study.c04<br/>
test.com.sajor.study.c04</p>
</blockquote>

<p>3、新建一个类 JdbcTemplateUtil</p>

<pre><code class="language-text">package com.sajor.study.c04;

import com.sajor.study.c01.Student;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

public class JdbcTemplateUtil {
    private JdbcTemplate jdbcTemplate;
    private String errorTest;

    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public void createTable() {
        jdbcTemplate.execute(&quot;DROP TABLE IF EXISTS user&quot;);
        jdbcTemplate.execute(&quot;CREATE TABLE user (\n&quot; +
                &quot; id int(11) NOT NULL AUTO_INCREMENT,\n&quot; +
                &quot; name varchar(50) DEFAULT NULL,\n&quot; +
                &quot; sex varchar(2) DEFAULT NULL,\n&quot; +
                &quot; email varchar(125) DEFAULT NULL,\n&quot; +
                &quot; PRIMARY KEY (`id`)\n&quot; +
                &quot;)&quot;
        );
    }

    public void addUser(Student student) {
        String sql = &quot;insert into user (name,sex,email) values(?,?,?)&quot;;
        jdbcTemplate.update(sql, student.getName(), student.getSex(), student.getEmail());
    }

    public void deleteUser(int id) {
        String sql = &quot;delete from user where id=?&quot;;
        jdbcTemplate.update(sql, id);
    }

    public void updateUser(Student student) {
        String sql = &quot;update user set name=?,sex=?,email=? where id=?&quot;;
        jdbcTemplate.update(sql, student.getName(), student.getSex(), student.getEmail(),
                student.getId());
    }

    // 简单查询，按照 ID 查询，返回字符串
    public String searchUserName(int id) {
        String sql = &quot;select name from user where id=?&quot;;
        return jdbcTemplate.queryForObject(sql, String.class, id);
    }

    // 复杂查询返回 List 集合
    public List&lt;Student&gt; findAll() {
        String sql = &quot;select * from user&quot;;
        return jdbcTemplate.query(sql, new StudentRowMapper());
    }

    //根据 id 查询
    public Student searchUser(int id) {
        String sql = &quot;select * from user where id=?&quot;;
        return jdbcTemplate.queryForObject(sql, new StudentRowMapper(), id);
    }

    //使用 spring RowMapper 进行数据集和对象映射
    class StudentRowMapper implements RowMapper&lt;Student&gt; {
        //rs 为返回结果集，以每行为单位封装着
        public Student mapRow(ResultSet rs, int rowNum) throws SQLException {
            Student student = new Student();
            student.setId(rs.getInt(&quot;id&quot;));
            student.setName(rs.getString(&quot;name&quot;));
            student.setSex(rs.getString(&quot;sex&quot;));
            student.setEmail(rs.getString(&quot;email&quot;));
            return student;
        }
    }

}

</code></pre>

<p>4、在 Spring 配置文件中配置数据库信息及 Bean</p>

<p>创建spring-config-c04.xml 将spring-config.xml的内容粘贴过来，我们根据之前的内容进行拓展</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;
    &lt;bean id=&quot;student&quot; class=&quot;com.sajor.study.c01.Student&quot;&gt;
    &lt;/bean&gt;
    &lt;bean id=&quot;school&quot; class=&quot;com.sajor.study.c01.School&quot;&gt;
        &lt;property name=&quot;students&quot; ref=&quot;student&quot;/&gt;
    &lt;/bean&gt;

    &lt;!-- 1.配置数据源 --&gt;
    &lt;bean id=&quot;dataSourceJDBC&quot;
          class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
        &lt;property name=&quot;url&quot;
                  value=&quot;jdbc:mysql://localhost:3306/TestDB?autoReconnect=true&amp;amp;characterEncoding=utf8&amp;amp;useUnicode=true&amp;useSSL=false&quot;/&gt;
        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;
    &lt;/bean&gt;

    &lt;!-- 2.配置 JDBC 模板 --&gt;
    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSourceJDBC&quot;/&gt;
    &lt;/bean&gt;

    &lt;!--3.定义使用 jdbc 模板的 jdbcTemplateUtil 类 --&gt;
    &lt;bean id=&quot;jdbcTemplateUtil&quot; class=&quot;com.sajor.study.c04.JdbcTemplateUtil&quot;&gt;
        &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;/&gt;
    &lt;/bean&gt;

&lt;/beans&gt;
</code></pre>

<p>5、新建一个测试类 JdbcTemplateTest</p>

<pre><code class="language-text">package test.com.sajor.study.c04;

import com.sajor.study.c01.Student;
import com.sajor.study.c04.JdbcTemplateUtil;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.util.List;

public class JdbcTemplateTest {
    public static void main(String[] args) {
        ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;spring-config-c04.xml&quot;);
        JdbcTemplateUtil jdbcTemplateUtil = (JdbcTemplateUtil) ctx.getBean(&quot;jdbcTemplateUtil&quot;);

        //第一次测试时，运行创建库表方法。后面注释掉
        jdbcTemplateUtil.createTable();

        Student student = (Student) ctx.getBean(&quot;student&quot;);
        student.setName(&quot;李四&quot;);
        student.setSex(&quot;01&quot;);
        student.setEmail(&quot;lisi@cn.cn&quot;);

        jdbcTemplateUtil.addUser(student);

        Student student1 = jdbcTemplateUtil.searchUser(1);
        System.out.println(&quot;id=&quot; + student1.getId() + &quot; &quot; + &quot;name=&quot; + student1.getName());

        List&lt;Student&gt; list = jdbcTemplateUtil.findAll();
        System.out.println(&quot;所有用户数=&quot; + list.size());

        for (int i = 0; i &lt; list.size(); i++) {
            Student student2 = (Student) list.get(i);
            System.out.println(&quot;id=&quot; + student2.getId() + &quot; &quot; + &quot;name=&quot; + student2.getName());
        }
    }
}
</code></pre>

<p>6、运行测试类</p>

<p>右键 JdbcTemplateTest 类，点击 Run 或 Debug JdbcTemplateTest.main() 运行结果</p>

<p><img src="media/15643143335228/15643153296887.jpg" alt="" style="width:1027px;"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从零开始SSM开发系列五：AOP]]></title>
    <link href="blog.sajor.top/15643132029446.html"/>
    <updated>2019-07-28T19:26:42+08:00</updated>
    <id>blog.sajor.top/15643132029446.html</id>
    <content type="html"><![CDATA[
<p>1、引用 AspectJ jar 包</p>

<p>点击 File&gt;Project Structure...，选中 Libraries，添加 java 引用<br/>
在 lib 中选择 aspectj-1.8.13 文件夹</p>

<p><img src="media/15643132029446/15643133513348.jpg" alt="" style="width:1018px;"/></p>

<p><img src="media/15643132029446/15643133198359.jpg" alt="" style="width:712px;"/></p>

<p>2、创建两个新的包</p>

<blockquote>
<p>com.sajor.study.c03<br/>
test.com.sajor.study.c03</p>
</blockquote>

<p>3、创建一个业务类 UserXML</p>

<pre><code class="language-text">package com.sajor.study.c03;

public class UserXML {
    private int id = 20180101;
    private String name = &quot;AspectJXML 测试用户&quot;;
    private String sex;
    private String email;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Override
    public String toString() {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(&quot;id=&quot;);
        stringBuffer.append(id);
        stringBuffer.append(&quot;\n&quot;);
        stringBuffer.append(&quot;name=&quot;);
        stringBuffer.append(name);
        return stringBuffer.toString();
    }

    public void saveUser() {
        System.out.println(&quot;保存用户信息...&quot;);
    }

    public void queryUser() {
        System.out.println(&quot;查看用户信息...&quot;);
        //email.length();
        System.out.println(this.toString());
    }

}
</code></pre>

<p>4、创建一个 AOP 切面类 UserXMLAspectJ</p>

<pre><code class="language-text">package com.sajor.study.c03;

//定义代理通知类(切面类)
public class UserXMLAspectJ {
    public void aspectBefore() {
        System.out.println(&quot;方法执行之前...&quot;);
    }

    public void aspectAfter() {
        System.out.println(&quot;方法执行之后...&quot;);
    }
}

</code></pre>

<p>2、创建配置类 spring-config-c03-aop.xml</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;
    &lt;!-- 1.定义业务 bean(目标类) --&gt;
    &lt;bean id=&quot;userxml&quot; class=&quot;com.sajor.study.c03.UserXML&quot;/&gt;
    &lt;!-- 2.定义代理类(切面类) --&gt;
    &lt;bean id=&quot;myAspectJ&quot; class=&quot;com.sajor.study.c03.UserXMLAspectJ&quot;/&gt;
    &lt;!-- 3.定义 aspectj--&gt;

    &lt;aop:config&gt;
        &lt;aop:aspect id=&quot;userAspect&quot; ref=&quot;myAspectJ&quot;&gt;
            &lt;!--3.1 定义切点--&gt;
            &lt;aop:pointcut id=&quot;userQueryUser&quot; expression=&quot;execution(* com.sajor.study.c03.UserXML.queryUser(..))&quot;/&gt;
            &lt;!--3.2 定义通知--&gt;
            &lt;aop:before pointcut-ref=&quot;userQueryUser&quot; method=&quot;aspectBefore&quot; /&gt;
            &lt;aop:after-returning pointcut-ref=&quot;userQueryUser&quot; method=&quot;aspectAfter&quot;/&gt;
        &lt;/aop:aspect&gt;
    &lt;/aop:config&gt;
&lt;/beans&gt;
</code></pre>

<p>3、新建一个测试类 AspecJXMLTest</p>

<pre><code class="language-text">package test.com.sajor.study.c03;

import com.sajor.study.c03.UserXML;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class AspecJXMLTest {
    public static void main(String[] args) {
        ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;spring-config-c03-aop.xml&quot;);
        UserXML user = (UserXML) ctx.getBean(&quot;userxml&quot;);
        user.queryUser();
    }
}

</code></pre>

<p>4、运行测试类</p>

<p>运行结果</p>

<p><img src="media/15643132029446/15643142498931.jpg" alt="" style="width:1202px;"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从零开始SSM开发系列四：依赖注入及 Bean 管理]]></title>
    <link href="blog.sajor.top/15642871336794.html"/>
    <updated>2019-07-28T12:12:13+08:00</updated>
    <id>blog.sajor.top/15642871336794.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">一、依赖注入</h2>

<p>1、新建一个 School 类<br/>
右键 src&gt;main&gt;java&gt;com.sajor.study.c01，点击 New&gt;Java Class</p>

<p>在 School 中引用 Student 类，并可以获得含有 Student 对象的一个 List:</p>

<pre><code class="language-text">    private int id = 2000;
    private String name = &quot;Sajor&quot;;
    private Student student;
    private List&lt;Student&gt; students = new ArrayList();
</code></pre>

<p>并使用代码生成器Genetater添加Getter and Setter方法完整代码如下</p>

<pre><code class="language-text">package com.sajor.study.c01;

import java.util.ArrayList;
import java.util.List;

public class School {
    private int id = 2000;
    private String name = &quot;Sajor&quot;;
    private Student student;
    private List&lt;Student&gt; students = new ArrayList();

    public School(){

    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public List&lt;Student&gt; getStudents() {
        return students;
    }

    public void setStudents(List&lt;Student&gt; students) {
        this.students = students;
    }
}
</code></pre>

<p>2、在 Spring 配置文件中声明 Bean，以及依赖注入</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;
    &lt;bean id=&quot;student&quot; class=&quot;com.sajor.study.c01.Student&quot;&gt;
        &lt;property name=&quot;id&quot; value=&quot;101&quot;&gt;&lt;/property&gt;
        &lt;property name=&quot;name&quot; value=&quot;张三丰&quot;&gt;&lt;/property&gt;
    &lt;/bean&gt;
    &lt;bean id=&quot;school&quot; class=&quot;com.sajor.study.c01.School&quot;&gt;
        &lt;property name=&quot;students&quot; ref=&quot;student&quot;/&gt;
    &lt;/bean&gt;

&lt;/beans&gt;
</code></pre>

<p>3、新建一个测试类，获得 school 对象，通过 school 对象 获得 student 对象<br/>
右键 src&gt;test&gt;java&gt;test.com.sajor.study.c01，点击 New&gt;Java Class，新建 SchoolTest 类<br/>
在 SchoolTest 中:<br/>
1)实例化 Spring 容器<br/>
2)获得 school 对象<br/>
3)通过 school 对象的 getStudents()方法获得 student 对象 4)调用 student 对象的 toString()方法</p>

<pre><code class="language-text">package test.com.sajor.study.c01;

import com.sajor.study.c01.School;
import com.sajor.study.c01.Student;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.util.ArrayList;

public class SchoolTest {
    public static void main(String[] args) {
        //1、实例化 spring 容器
        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;spring-config.xml&quot;);

        //获得 school 对象
        School sc = (School) ac.getBean(&quot;school&quot;);

        //3、调用 school 对象的 getStudents 方法
        ArrayList&lt;Student&gt; sl = (ArrayList&lt;Student&gt;) sc.getStudents();

        //4、获得 school 里面的 student 对象
        for (Student s : sl) {
            System.out.println(s.toString());
        }
    }
}
</code></pre>

<p>4、运行测试类<br/>
右键 SchoolTest 类，点击 Run 或 Debug SchoolTest.main()运行结果<br/>
<img src="media/15642871336794/15642894116662.jpg" alt="" style="width:1440px;"/></p>

<h2 id="toc_1">二、基于 XML 的 Bean 装配</h2>

<p>1、新建一个 User 类<br/>
新建一个包，com.sajor.study.c02.xml<br/>
右键 src&gt;main&gt;java&gt;com.sajor.study.c02，点击 New&gt;Java Class，在 c02 中新建一个 User 类，创建两个构造函数。</p>

<pre><code class="language-text">package com.sajor.study.c02;

public class User {
    private int id = 20180101;
    private String name = &quot;&quot;;
    private String sex;
    private String email;

    public User(int id, String name, String sex, String email) {
        this.id = id;
        this.name = name;
        this.sex = sex;
        this.email = email;
    }

    public User() {

    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String toString() {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(&quot;id=&quot;);
        stringBuffer.append(id);
        stringBuffer.append(&quot;\n&quot;);
        stringBuffer.append(&quot;name=&quot;);
        stringBuffer.append(name);
        return stringBuffer.toString();
    }
}
</code></pre>

<p>2、新建一个spring-config-c01-xml.xml文件，并在 Spring 配置文件中声明 Bean</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;bean id=&quot;user1&quot; class=&quot;com.sajor.study.c02.xml.User&quot;&gt;
        &lt;constructor-arg index=&quot;0&quot; value=&quot;20180501&quot;/&gt;
        &lt;constructor-arg index=&quot;1&quot; value=&quot;张一帆&quot;/&gt;
        &lt;constructor-arg index=&quot;2&quot; value=&quot;男&quot;/&gt;
        &lt;constructor-arg index=&quot;3&quot; value=&quot;zhangyifan@hbxy.cn&quot;/&gt;
    &lt;/bean&gt;

    &lt;bean id=&quot;user2&quot; class=&quot;com.sajor.study.c02.xml.User&quot;&gt;
        &lt;property name=&quot;id&quot; value=&quot;20180502&quot;/&gt;
        &lt;property name=&quot;name&quot; value=&quot;李大壮&quot;/&gt;
        &lt;property name=&quot;sex&quot; value=&quot;男&quot;/&gt;
        &lt;property name=&quot;email&quot; value=&quot;lidazhuang@hbxy.cn&quot;/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre>

<p>3、创建测试类 XmlBeanAssembleTest</p>

<pre><code class="language-text">package test.com.sajor.study.c02;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class XmlBeanAssembleTest {
    public static void main(String[] args) {

        //1、实例化 spring 容器
        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;spring-config-c02-xml.xml&quot;);

        //2、获得并打印 user 对象
        System.out.println(applicationContext.getBean(&quot;user1&quot;));
        System.out.println(applicationContext.getBean(&quot;user2&quot;));
    }
}
</code></pre>

<p>4、运行测试类</p>

<p><img src="media/15642871336794/15643066371448.jpg" alt="" style="width:1440px;"/></p>

<p>三、基于注解的 Bean 装配<br/>
1、新建一个包</p>

<p>新建包:com.sajor.study.c02.annotation</p>

<p>2、新建 TeacherAnnotation 类</p>

<p>使用注解@Component 声明 TeacherAnnotation 类</p>

<pre><code class="language-text">package com.sajor.study.c02.annotation;

import org.springframework.stereotype.Component;

@Component(&quot;teacherAnnotation&quot;)
public class TeacherAnnotation {
    private int id = 20180101;
    private String name = &quot;李老师&quot;;
    private String sex;
    private String email;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Override
    public String toString() {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(&quot;id=&quot;);
        stringBuffer.append(id);
        stringBuffer.append(&quot;\n&quot;);
        stringBuffer.append(&quot;name=&quot;);
        stringBuffer.append(name);
        return stringBuffer.toString();
    }
}
</code></pre>

<p>3、新建 ClazzAnnotation 类</p>

<p>同样使用注解@Component 声明 ClazzAnnotation 类，并使用注解 @Autowired 自动绑定 TeacherAnnotation 类对象(注入)</p>

<pre><code class="language-text">package com.sajor.study.c02.annotation;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component(&quot;clazzAnnotation&quot;)
public class ClazzAnnotation {
    private int id = 2015001;
    private String name = &quot;2015001 班&quot;;
    private TeacherAnnotation teacherAnnotation;//班主任

    @Autowired
    public ClazzAnnotation(TeacherAnnotation teacherAnnotation) {
        this.teacherAnnotation = teacherAnnotation;
    }

    public TeacherAnnotation getTeacherAnnotation() {
        return teacherAnnotation;
    }

    @Override
    public String toString() {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(&quot;基于注解注入:&quot;);
        stringBuffer.append(&quot;\n&quot;);
        stringBuffer.append(&quot;id=&quot;);
        stringBuffer.append(id);
        stringBuffer.append(&quot;\n&quot;);
        stringBuffer.append(&quot;name=&quot;);
        stringBuffer.append(name);
        stringBuffer.append(&quot;\n&quot;);
        stringBuffer.append(&quot;班主任:&quot;);
        stringBuffer.append(this.getTeacherAnnotation().getId());
        stringBuffer.append(&quot; &quot;);
        stringBuffer.append(this.getTeacherAnnotation().getName());
        return stringBuffer.toString();
    }
}

</code></pre>

<p>4、在配置文件中定义扫描包</p>

<p>新建 spring-config-c02-annotation.xml 配置文件，并配置扫描包路径:</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;
    &lt;context:component-scan base-package=&quot;com.sajor.study.c02.annotation&quot;/&gt;
&lt;/beans&gt;
</code></pre>

<p>5、创建测试类</p>

<pre><code class="language-text">package test.com.sajor.study.c02;

import com.sajor.study.c02.annotation.ClazzAnnotation;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class AnnotationTest {
    public static void main(String[] args) {
        ApplicationContext ac = new ClassPathXmlApplicationContext(new String[]{&quot;spring-config-c02-annotation.xml&quot;});
        ClazzAnnotation c = (ClazzAnnotation) ac.getBean(&quot;clazzAnnotation&quot;);
        System.out.println(c.toString());
    }
}

</code></pre>

<p>6、运行测试类</p>

<p><img src="media/15642871336794/15643075920352.jpg" alt="" style="width:576px;"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从零开始SSM开发系列三：第一个Spring应用]]></title>
    <link href="blog.sajor.top/15642457728170.html"/>
    <updated>2019-07-28T00:42:52+08:00</updated>
    <id>blog.sajor.top/15642457728170.html</id>
    <content type="html"><![CDATA[
<p>1、新建一个包 com.sajor.study.c01</p>

<p>打开开发工具 Intellij IDEA，打开之前创建的工程右键 src&gt;main&gt;java&gt;com.sajor.study，点击 New&gt;Package</p>

<p><img src="media/15642457728170/15642804469364.jpg" alt="" style="width:1440px;"/></p>

<p>创建包 c01</p>

<p><img src="media/15642457728170/15642804957751.jpg" alt="" style="width:439px;"/></p>

<p>2、新建一个 Student 类<br/>
右键 src&gt;main&gt;java&gt;com.sajor.study.c01，点击 New&gt;Java Class</p>

<p><img src="media/15642457728170/15642805665034.jpg" alt="" style="width:1440px;"/></p>

<p>创建Student类</p>

<p><img src="media/15642457728170/15642805813614.jpg" alt="" style="width:349px;"/></p>

<p>Student 类包含 4 个属性</p>

<pre><code class="language-text">package com.sajor.study.c01;

public class Student {
    private int id;
    private String name;
    private String sex;
    private String email;
}
</code></pre>

<p>使用 IDEA 代码生成器，帮助生成属性的 getter，setter 方法 点击菜单 Code&gt;Genetater...</p>

<p><img src="media/15642457728170/15642807806663.jpg" alt="" style="width:1440px;"/></p>

<p>选择 Getter and Setter</p>

<p><img src="media/15642457728170/15642808683154.jpg" alt="" style="width:199px;"/></p>

<p>选择全部属性(按住 control，鼠标点击)，点击 ok。</p>

<p><img src="media/15642457728170/15642808444644.jpg" alt="" style="width:374px;"/></p>

<p>生成 Student 类</p>

<pre><code class="language-text">package com.sajor.study.c01;

public class Student {
    private int id;
    private String name;
    private String sex;
    private String email;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}
</code></pre>

<p>再次使用 IDEA 代码生成器，帮助生成对象的toString方法 点击菜单 Code&gt;Genetater... <br/>
<img src="media/15642457728170/15642809490846.jpg" alt="" style="width:199px;"/></p>

<p>重写 toString 方法</p>

<pre><code class="language-text">  @Override
    public String toString() {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(&quot;id=&quot;);
        stringBuffer.append(id);
        stringBuffer.append(&quot;\n&quot;);
        stringBuffer.append(&quot;name=&quot;);
        stringBuffer.append(name);
        return stringBuffer.toString();
    }
</code></pre>

<p>完整的 Student 代码:</p>

<pre><code class="language-text">package com.sajor.study.c01;

public class Student {
    private int id;
    private String name;
    private String sex;
    private String email;

    @Override
    public String toString() {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(&quot;id=&quot;);
        stringBuffer.append(id);
        stringBuffer.append(&quot;\n&quot;);
        stringBuffer.append(&quot;name=&quot;);
        stringBuffer.append(name);
        return stringBuffer.toString();
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}

</code></pre>

<p>3、在 Spring 配置文件中声明 Bean<br/>
右键 src&gt;main&gt;resources，点击 New&gt;XML Configuration File&gt;Spring Config</p>

<p><img src="media/15642457728170/15642811121537.jpg" alt="" style="width:1440px;"/></p>

<p>新建一个 spring-config.xml 文件, 点击 ok</p>

<p><img src="media/15642457728170/15642811358415.jpg" alt="" style="width:360px;"/></p>

<p>在 srping-config.xml 中声明 bean</p>

<pre><code class="language-text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;
    &lt;bean id=&quot;student&quot; class=&quot;com.sajor.study.c01.Student&quot; &gt;&lt;/bean&gt;
&lt;/beans&gt;
</code></pre>

<p>4、新建一个测试包 c01<br/>
右键 src&gt;test&gt;java&gt;test.com.sajor.study，点击 New&gt;Package，新建包 c01，新建一个测试类，获得 student 对象<br/>
右键 src&gt;test&gt;java&gt;text.com.sajor.study.c01，点击 New&gt;Java Class，新建 StudentTest 类</p>

<p><img src="media/15642457728170/15642813943817.jpg" alt="" style="width:1440px;"/></p>

<p>在 StudentTest 中:<br/>
1)实例化 Spring 容器<br/>
2)获得 student 对象<br/>
3)调用 student 对象的 toString()方法</p>

<pre><code class="language-text">package test.com.sajor.study.c01;

import com.sajor.study.c01.Student;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class StudentTest {
    public static void main(String[] args) {
        // 1、实例化 spring 容器
        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;spring-config.xml&quot;);

        // 2、获得 student 对象
        Student s = (Student) ac.getBean(&quot;student&quot;);
        s.setId(100);
        s.setName(&quot;张三&quot;);

        // 3、调用 student 对象的 toString 方法
        System.out.println(s.toString());
    }
}
</code></pre>

<p>6、运行测试类</p>

<p>右键 StudenTest 类，点击 Run 或 Debug StudentTest.main()</p>

<p><img src="media/15642457728170/15642816403902.jpg" alt="" style="width:1440px;"/></p>

<p>运行结果</p>

<p><img src="media/15642457728170/15642816642702.jpg" alt="" style="width:1436px;"/></p>

]]></content>
  </entry>
  
</feed>
